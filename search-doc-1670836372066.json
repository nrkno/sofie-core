[{"title":"API Documentation","type":0,"sectionRef":"#","url":"docs/for-developers/api-documentation","content":"API Documentation The Sofie Blueprints API and the Sofie Peripherals API documentation is automatically generated and available throughnrkno.github.io/sofie-core/typedoc.","keywords":""},{"title":"NRK Sofie TV Automation System","type":0,"sectionRef":"#","url":"docs/about-sofie","content":"","keywords":""},{"title":"Key Features​","type":1,"pageTitle":"NRK Sofie TV Automation System","url":"docs/about-sofie#key-features","content":"User-friendly, modern web-based GUIState-based device control and playout of video, audio, and graphicsModular device-control architecture with support for several hardware (and software) setupsModular data-ingest architecture, supports MOS and Google spreadsheetsPlug-in architecture for programming shows The NRK logo is a registered trademark of Norsk rikskringkasting AS. The license does not grant any right to use, in any way, any trademarks, service marks or logos of Norsk rikskringkasting AS. "},{"title":"Contribution Guidelines","type":0,"sectionRef":"#","url":"docs/for-developers/contribution-guidelines","content":"","keywords":""},{"title":"Reporting bugs​","type":1,"pageTitle":"Contribution Guidelines","url":"docs/for-developers/contribution-guidelines#reporting-bugs","content":"If you think you have found a bug in Sofie, we appreciate bug reports as GitHub issues. As a minimum a bug report should include the following: Steps to reproduce: a detailed description of what input or interaction caused the problem you are experiencing. This will help us greatly in reproducing the error situation ourselves, so that we can observe and analyze the problem.Expected behavior or result: Following the steps given, what was it that you expected to happen?Actual behavior or result: Following the steps given, what was it that actually happened? Feel free to include additional information if you have it. Issues should be reported in our main repository: https://github.com/nrkno/Sofie-TV-automation/issues "},{"title":"Contributing code​","type":1,"pageTitle":"Contribution Guidelines","url":"docs/for-developers/contribution-guidelines#contributing-code","content":""},{"title":"How to contribute​","type":1,"pageTitle":"Contribution Guidelines","url":"docs/for-developers/contribution-guidelines#how-to-contribute","content":"Minor improvements and bug fixes​ If you believe you have a minor improvement or a bug fix that can be added to the project you are welcome to contribute it as a pull request via GitHub. New features or bigger changes​ If you're considering a larger contribution, we would love to have a chat beforehand about it to make sure it fits nicely into our own development. Please open an issue for discussion over at https://github.com/nrkno/Sofie-TV-automation/issues "},{"title":"Things to keep in mind when contributing​","type":1,"pageTitle":"Contribution Guidelines","url":"docs/for-developers/contribution-guidelines#things-to-keep-in-mind-when-contributing","content":"Types​ All of the Sofie projects use Typescript. When you contribute code, be sure to keep it as strictly-typed as possible. Code style &amp; formatting​ Most of the projects use a linter. Before pushing your code, make sure it abides to the linting rules by running yarn lint. yarn lint --fixcan fix most of the issues. info Tip: If using VS Code, turn on the &quot;format on save&quot;-feature in the settings, that way you won't have to think about formatting! Documentation​ To be honest, we don't aim to have the &quot;absolute perfect documentation possible&quot;. BUT we do try to improve and add documentation to have a good-enough-to-be-comprehensible standard. The &quot;what&quot; something does something, is not as important - we can read the code for that.The &quot;why&quot; something does something, IS important. Implied usage, side-effects, descriptions of the context etc.. Those are things that greatly help a reader. Tests​ Most of the sofie-projects have unit-tests with a fairly good coverage. While developing, make sure any existing tests pass before you push your code. yarn test or yarn watch are your friends. "},{"title":"Updating Dependencies​","type":1,"pageTitle":"Contribution Guidelines","url":"docs/for-developers/contribution-guidelines#updating-dependencies","content":"When updating dependencies in a library, it is preferred to do so via yarn upgrade-interactive --latest whenever possible. This is so that the versions in package.json are also updated as we have no guarantee that the library will work with versions lower than that used in the yarn.lock file, even if it is compatible with the semver range in package.json. After this, a yarn upgrade can be used to update any child dependencies Be careful with bumping across major versions. Also, be aware that a couple of the libraries want to retain support for node8. Not all dependencies can be updated as doing so will cause things to break for node8. Resolutions​ We use the yarn resolutions property in package.json sometimes to fix security vulnerabilities in dependencies of libraries that haven't released a fix yet. If adding a new one, try to make it as specific as possible to ensure it doesn't have unintended side effects. When updating other dependencies, it is a good idea to make sure that the resolutions defined still apply and are correct info We use Jest for running unit-tests. Read more about its CLI here. "},{"title":"Intro","type":0,"sectionRef":"#","url":"docs/for-developers/for-blueprint-developers/intro","content":"Intro caution Documentation for this page is yet to be written. Blueprints are programs that run inside Sofie Core and interpret data coming in from the Rundowns and transform that into playable elements. They use an API published in @sofie-automation/blueprints-integration library to expose their functionality and communicate with Sofie Core. Technically, a Blueprint is a JavaScript object, implementing one of the BlueprintManifestBase interfaces. Currently, there are three types of Blueprints: Show Style Blueprints - handling converting NRCS Rundown data into Sofie Rundowns and content.Studio Blueprints - handling selecting ShowStyles for a given NRCS Rundown and assigning NRCS Rundowns to Sofie PlaylistsSystem Blueprints - handling system provisioning and global configuration","keywords":""},{"title":"For Developers","type":0,"sectionRef":"#","url":"docs/for-developers/intro","content":"For Developers The pages below are intended for developers of any of the Sofie-related repos and/or blueprints. A read-through of the Concepts &amp; Architectures is recommended, before diving too deep into development. LibrariesContribution GuidelinesFor Blueprint DevelopersAPI Documentation","keywords":""},{"title":"Part and Piece Timings","type":0,"sectionRef":"#","url":"docs/for-developers/for-blueprint-developers/part-and-piece-timings","content":"","keywords":""},{"title":"The properties​","type":1,"pageTitle":"Part and Piece Timings","url":"docs/for-developers/for-blueprint-developers/part-and-piece-timings#the-properties","content":"These are stripped down interfaces, containing only the properties that are relevant for the timeline generation: export interface IBlueprintPart { /** Should this item should progress to the next automatically */ autoNext?: boolean /** How much to overlap on when doing autonext */ autoNextOverlap?: number /** Timings for the inTransition, when supported and allowed */ inTransition?: IBlueprintPartInTransition /** Should we block the inTransition when starting the next Part */ disableNextInTransition?: boolean /** Timings for the outTransition, when supported and allowed */ outTransition?: IBlueprintPartOutTransition /** Expected duration of the line, in milliseconds */ expectedDuration?: number } /** Timings for the inTransition, when supported and allowed */ export interface IBlueprintPartInTransition { /** Duration this transition block a take for. After this time, another take is allowed which may cut this transition off early */ blockTakeDuration: number /** Duration the previous part be kept playing once the transition is started. Typically the duration of it remaining in-vision */ previousPartKeepaliveDuration: number /** Duration the pieces of the part should be delayed for once the transition starts. Typically the duration until the new part is in-vision */ partContentDelayDuration: number } /** Timings for the outTransition, when supported and allowed */ export interface IBlueprintPartOutTransition { /** How long to keep this part alive after taken out */ duration: number } export interface IBlueprintPiece { /** Timeline enabler. When the piece should be active on the timeline. */ enable: { start: number | 'now' // 'now' is only valid from adlib-actions when inserting into the current part duration?: number } /** Whether this piece is a special piece */ pieceType: IBlueprintPieceType /// from IBlueprintPieceGeneric: /** Whether and how the piece is infinite */ lifespan: PieceLifespan /** * How long this piece needs to prepare its content before it will have an effect on the output. * This allows for flows such as starting a clip playing, then cutting to it after some ms once the player is outputting frames. */ prerollDuration?: number } /** Special types of pieces. Some are not always used in all circumstances */ export enum IBlueprintPieceType { Normal = 'normal', InTransition = 'in-transition', OutTransition = 'out-transition', }  "},{"title":"Concepts​","type":1,"pageTitle":"Part and Piece Timings","url":"docs/for-developers/for-blueprint-developers/part-and-piece-timings#concepts","content":"Piece Preroll​ Often, a Piece will need some time to do some preparation steps on a device before it should be considered as active. A common example is playing a video, as it often takes the player a couple of frames before the first frame is output to SDI. This can be done with the prerollDuration property on the Piece. A general rule to follow is that it should not have any visible or audible effect on the output until prerollDuration has elapsed into the piece. When the timeline is built, the Pieces get their start times adjusted to allow for every Piece in the part to have its preroll time. If you look at the auto-generated pieceGroup timeline objects, their times will rarely match the times specified by the blueprints. Additionally, the previous Part will overlap into the Part long enough for the preroll to complete. Try the interactive to see how the prerollDuration properties interact. In Transition​ The in transition is a special Piece that can be played when taking into a Part. It is represented as a Piece, partly to show the user the transition type and duration, and partly to allow for timeline changes to be applied when the timeline generation thinks appropriate. When the inTransition is set on a Part, it will be applied when taking into that Part. During this time, any Pieces with pieceType: IBlueprintPieceType.InTransition will be added to the timeline, and the IBlueprintPieceType.Normal Pieces in the Part will be delayed based on the numbers from inTransition Try the interactive to see how the an inTransition affects the Piece and Part layout. Out Transition​ The out transition is a special Piece that gets played when taking out of the Part. It is intended to allow for some 'visual cleanup' before the take occurs. In effect, when outTransition is set on a Part, the take out of the Part will be delayed by the duration defined. During this time, any pieces with pieceType: IBlueprintPieceType.OutTransition will be added to the timeline and will run until the end of the Part. Try the interactive to see how this affects the Parts. "},{"title":"Piece postroll​","type":1,"pageTitle":"Part and Piece Timings","url":"docs/for-developers/for-blueprint-developers/part-and-piece-timings#piece-postroll","content":"Sometimes rather than extending all the pieces and playing an out transition piece on top we want all pieces to stop except for 1, this has the same goal of 'visual cleanup' as the out transition but works slightly different. The main concept is that an out transition delays the take slightly but with postroll the take executes normally however the pieces with postroll will keep playing for a bit after the take. When the postrollDuration is set on a piece the part group will be extended slightly allowing pieces to play a little longer, however any piece that do not have postroll will end at their regular time. Autonext​ Autonext is a way for a Part to be made a fixed length. After playing for its expectedDuration, core will automatically perform a take into the next part. This is commonly used for fullscreen videos, to exit back to a camera before the video freezes on the last frame. It is enabled by setting the autoNext: true on a Part, and requires expectedDuration to be set to a duration higher than 1000. In other situations, it can be desirable for a Part to overlap the next one for a few seconds. This is common for Parts such as a title sequence or bumpers, where the sequence ends with an keyer effect which should reveal the next Part. To achieve this you can set autoNextOverlap: 1000 // ms to make the parts overlap on the timeline. In doing so, the in transition for the next Part will be ignored. The autoNextOverlap property can be thought of an override for the intransition on the next part defined as: const inTransition = { blockTakeDuration: 1000, partContentDelayDuration: 0, previousPartKeepaliveDuration: 1000, }  Infinites​ Pieces with an infinite lifespan (ie, not lifespan: PieceLifespan.WithinPart) get handled differently to other pieces. Only one pieceGoup is created for an infinite Piece which is present in multiple of the current, next and previous Parts. The Piece calculates and tracks its own started playback times, which is preserved and reused in future takes. On the timeline it lives outside of the partGroups, but still gets the same caps applied when appropriate. "},{"title":"Interactive timings demo​","type":1,"pageTitle":"Part and Piece Timings","url":"docs/for-developers/for-blueprint-developers/part-and-piece-timings#interactive-timings-demo","content":"Use the sliders below to see how various Preroll and In &amp; Out Transition timing properties interact with each other. In Transition Out Transition PartGroup A Piece A1 Piece A2 PartGroup B Piece B1 Piece B2 Super B3 Piece B1 Preroll Duration Piece B2 Preroll Duration Piece A1 Postroll Duration Piece A2 Postroll Duration Part A Out Transition Duration Part B In Transition Block Duration Part B In Transition Contents Delay Part B In Transition Keepalive\t "},{"title":"Worker Threads & Locks","type":0,"sectionRef":"#","url":"docs/for-developers/worker-threads-and-locks","content":"","keywords":""},{"title":"The Worker​","type":1,"pageTitle":"Worker Threads & Locks","url":"docs/for-developers/worker-threads-and-locks#the-worker","content":"The worker process is designed to run the work for one or more studios. The initial implementation will run for all studios in the database, and is monitoring for studios to be added or removed. For each studio, the worker runs 3 threads: The Studio/Playout thread. This is where all the playout operations are executed, as well as other operations that require 'ownership' of the StudioThe Ingest thread. This is where all the MOS/Ingest updates are handled and fed through the bluerpints.The events thread. Some low-priority tasks are pushed to here. Such as notifying ENPS about the yellow line, or the Blueprints methods used to generate External-Messages for As-Run Log. In future it is expected that there will be multiple ingest threads. How the work will be split across them is yet to be determined "},{"title":"Locks​","type":1,"pageTitle":"Worker Threads & Locks","url":"docs/for-developers/worker-threads-and-locks#locks","content":"At times, the playout and ingest threads both need to take ownership of RundownPlaylists and Rundowns. To facilitate this, there are a couple of lock types in Sofie. These are coordinated by the parent thread in the worker process. PlaylistLock​ This lock gives ownership of a specific RundownPlaylist. It is required to be able to load a CacheForPlayout, and must held during other times where the RundownPlaylist is modified or is expected to not change. RundownLock​ This lock gives ownership of a specific Rundown. It is required to be able to load a CacheForIngest, and must held during other times where the Rundown is modified or is expected to not change. caution It is not allowed to aquire a RundownLock while inside of a PlaylistLock. This is to avoid deadlocks, as it is very common to aquire a PlaylistLock inside of a RundownLock "},{"title":"Applications & Libraries","type":0,"sectionRef":"#","url":"docs/for-developers/libraries","content":"","keywords":""},{"title":"Main Application​","type":1,"pageTitle":"Applications & Libraries","url":"docs/for-developers/libraries#main-application","content":"Sofie Core is the main application that serves the web GUI and handles the core logic. "},{"title":"Gateways​","type":1,"pageTitle":"Applications & Libraries","url":"docs/for-developers/libraries#gateways","content":"Together with the Sofie Core there are several gateways which are separate applications, but which connect to Sofie Core and are managed from within the Core's web UI. Playout Gateway Handles the playout from Sofie. Connects to and controls a multitude of devices, such as vision mixers, graphics, light controllers, audio mixers etc..MOS Gateway Connects Sofie to a newsroom system (NRCS) and ingests rundowns via the MOS protocol.iNEWS Gateway Connects Sofie to an Avid iNEWS newsroom system.Quantel Gateway CORBA to REST gateway for Quantel/ISA playback. Spreadsheet Gateway Connects Sofie to a Google Drive folder and ingests rundowns from Google Sheets.Input Gateway  "},{"title":"Libraries​","type":1,"pageTitle":"Applications & Libraries","url":"docs/for-developers/libraries#libraries","content":"There are a number of libraries used in the Sofie ecosystem: ATEM Connection Library for communicating with Blackmagic Design's ATEM mixersATEM State Used in TSR to tracks the state of ATEMs and generate commands to control them.CasparCG Server Connection developed by SuperFly.tv Library to connect and interact with CasparCG Servers.CasparCG State developed by SuperFly.tv Used in TSR to tracks the state of CasparCG Servers and generate commands to control them.Ember+ Connection Library to communicate with Ember+ control protocol HyperDeck Connection Library for connecting to Blackmagic Design's HyperDeck recorders.MOS Connection A MOS protocol library for acting as a MOS device and connecting to an newsroom control system.Quantel Gateway Client An interface that talks to the Quantel-Gateway application.Sofie Core Integration Used to connect to the Sofie Core by the Gateways.Sofie Blueprints Integration Common types and interfaces used by both Sofie Core and the user-defined blueprints.SuperFly-Timeline developed by SuperFly.tv Resolver and rules for placing objects on a virtual timeline.ThreadedClass developed by Nytamin Used in TSR to spawn device controllers in separate processes.Timeline State Resolver (TSR) The main driver in Playout Gateway, handles connections to playout-devices and sends commands based on a Timeline received from Core. There are also a few typings-only libraries that define interfaces between applications: Blueprints Integration Defines the interface between Blueprints and Sofie Core.Timeline State Resolver types Defines the interface between Blueprints and the timeline that will be fed into TSR for playout. "},{"title":"Other Sofie-related Repositories​","type":1,"pageTitle":"Applications & Libraries","url":"docs/for-developers/libraries#other-sofie-related-repositories","content":"CasparCG Server (NRK fork) Sofie-specific fork of CasparCG Server.CasparCG Launcher Launcher, controller, and logger for CasparCG Server.CasparCG Media Scanner (NRK fork) Sofie-specific fork of CasparCG Server 2.2 Media Scanner.Package Manager Handles media asset transfer and media file management for pulling new files and deleting expired files on playout devices in a more performant, and possibly distributed, way. Can smartly figure out how to get a file on storage A to playout server B.Media Manager (deprecated) Handles media transfer and media file management for pulling new files and deleting expired files on playout devices.Quantel Browser Plugin MOS-compatible Quantel video clip browser for use with Sofie.Sisyfos Audio Controller developed by olzzon "},{"title":"Concepts & Architecture","type":0,"sectionRef":"#","url":"docs/user-guide/concepts-and-architecture","content":"","keywords":""},{"title":"System Architecture​","type":1,"pageTitle":"Concepts & Architecture","url":"docs/user-guide/concepts-and-architecture#system-architecture","content":" "},{"title":"Sofie Core​","type":1,"pageTitle":"Concepts & Architecture","url":"docs/user-guide/concepts-and-architecture#sofie-core","content":"Sofie Core is a web server which handle business logic and serves the web GUI. It is a NodeJS process backed up by a MongoDB database and based on the framework Meteor. "},{"title":"Gateways​","type":1,"pageTitle":"Concepts & Architecture","url":"docs/user-guide/concepts-and-architecture#gateways","content":"Gateways are applications that connect to Sofie Core and and exchanges data; such as rundown data from an NRCS or the Timeline for playout. An examples of a gateways is the Spreadsheet Gateway. All gateways use the Core Integration Library to communicate with Core. "},{"title":"System, (Organization), Studio & Show Style​","type":1,"pageTitle":"Concepts & Architecture","url":"docs/user-guide/concepts-and-architecture#system-organization-studio--show-style","content":"To be able to facilitate various workflows and to Here's a short explanation about the differences between the &quot;System&quot;, &quot;Organization&quot;, &quot;Studio&quot; and &quot;Show Style&quot;. The System defines the whole of the Sofie CoreThe Organization (only available if user accounts are enabled) defines things that are common for an organization. An organization consists of: Users, Studios and ShowStyles.The Studio contains things that are related to the &quot;hardware&quot; or &quot;rig&quot;. Technically, a Studio is defined as an entity that can have one (or none) rundown active at any given time. In most cases, this will be a representation of your gallery, with cameras, video playback and graphics systems, external inputs, sound mixers, lighting controls and so on. A single System can easily control multiple Studios.The Show Style contains settings for the &quot;show&quot;, for example if there's a &quot;Morning Show&quot; and an &quot;Afternoon Show&quot; - produced in the same gallery - they might be two different Show Styles (played in the same Studio).  "},{"title":"Playlists, Rundowns, Segments, Parts, Pieces​","type":1,"pageTitle":"Concepts & Architecture","url":"docs/user-guide/concepts-and-architecture#playlists-rundowns-segments-parts-pieces","content":" "},{"title":"Playlist​","type":1,"pageTitle":"Concepts & Architecture","url":"docs/user-guide/concepts-and-architecture#playlist","content":"A Playlist (or &quot;Rundown Playlist&quot;) is the entity that &quot;goes on air&quot; and controls the playhead/Take Point. It contains one or several Rundowns inside, which are playout out in order. info In some many studios, there is only ever one rundown in a playlist. In those cases, we sometimes lazily refer to playlists and rundowns as &quot;being the same thing&quot;. A Playlist is played out in the context of it's Studio, thereby only a single Playlist can be active at a time within each Studio. A playlist is normally played through and then ends but it is also possible to make looping playlists in which case the playlist will start over from the top after the last part has been played. "},{"title":"Rundown​","type":1,"pageTitle":"Concepts & Architecture","url":"docs/user-guide/concepts-and-architecture#rundown","content":"The Rundown contains the content for a show. It contains Segments and Parts, which can be selected by the user to be played out. A Rundown always has a showstyle and is played out in the context of the Studio of its Playlist. "},{"title":"Segment​","type":1,"pageTitle":"Concepts & Architecture","url":"docs/user-guide/concepts-and-architecture#segment","content":"The Segment is the horizontal line in the GUI. It is intended to be used as a &quot;chapter&quot; or &quot;subject&quot; in a rundown, where each individual playable element in the Segment is called a Part. "},{"title":"Part​","type":1,"pageTitle":"Concepts & Architecture","url":"docs/user-guide/concepts-and-architecture#part","content":"The Part is the playable element inside of a Segment. This is the thing that starts playing when the user does a TAKE. The Part in itself doesn't determine what's going to happen, that's handled by the Pieces in it. "},{"title":"Piece​","type":1,"pageTitle":"Concepts & Architecture","url":"docs/user-guide/concepts-and-architecture#piece","content":"The Pieces inside of a Part determines what's going to happen, the could be indicating things like VT:s, cut to cameras, graphics, or what script the host is going to read. Inside of the pieces are the timeline-objects which controls the playout on a technical level. tip Tip! If you want to manually play a certain piece (for example a graphics overlay), you can at any time double-click it in the GUI, and it will be copied and played at your play head, just like an AdLib would! See also: Showstyle "},{"title":"AdLib Piece​","type":1,"pageTitle":"Concepts & Architecture","url":"docs/user-guide/concepts-and-architecture#adlib-piece","content":"The AdLib pieces are Pieces that isn't programmed to fire at a specific time, but instead intended to be manually triggered by the user. The AdLib pieces can either come from the currently playing Part, or it could be global AdLibs that are available throughout the show. An AdLib isn't added to the Part in the GUI until it starts playing, instead you find it in the Shelf. "},{"title":"Views​","type":1,"pageTitle":"Concepts & Architecture","url":"docs/user-guide/concepts-and-architecture#views","content":"Being a web-based system, Sofie has a number of customisable, user-facing web views used for control and monitoring. "},{"title":"Blueprints​","type":1,"pageTitle":"Concepts & Architecture","url":"docs/user-guide/concepts-and-architecture#blueprints","content":"Blueprints are plug-ins that run in Sofie Core. They interpret the data coming in from the rundowns and transform them into a rich set of playable elements (Segments, Parts, AdLibs etc). The blueprints are webpacked javascript bundles which are uploaded into Sofie via the GUI. They are custom-made and changes depending on the show style, type of input data (NRCS) and the types of controlled devices. A generic blueprint that works with spreadsheets is available here. When Sofie Core calls upon a Blueprint, it returns a JavaScript object containing methods callable by Sofie Core. These methods will be called by Sofie Core in different situations, depending on the method. Documentation on these interfaces are available in the Blueprints integration library. There are 3 types of blueprints, and all 3 must be uploaded into Sofie before the system will work correctly. "},{"title":"System Blueprints​","type":1,"pageTitle":"Concepts & Architecture","url":"docs/user-guide/concepts-and-architecture#system-blueprints","content":"Handle things on the System level. Documentation on the interface to be exposed by the Blueprint: https://github.com/nrkno/sofie-sofie-blueprints-integration/blob/master/src/api.ts#L52 "},{"title":"Studio Blueprints​","type":1,"pageTitle":"Concepts & Architecture","url":"docs/user-guide/concepts-and-architecture#studio-blueprints","content":"Handle things on the Studio level, like &quot;which showstyle to use for this rundown&quot;. Documentation on the interface to be exposed by the Blueprint: https://github.com/nrkno/sofie-sofie-blueprints-integration/blob/master/src/api.ts#L57 "},{"title":"Showstyle Blueprints​","type":1,"pageTitle":"Concepts & Architecture","url":"docs/user-guide/concepts-and-architecture#showstyle-blueprints","content":"Handle things on the Showstyle level, like generating Baseline, Segments, Parts, Pieces and Timelines in a rundown. Documentation on the interface to be exposed by the Blueprint: https://github.com/nrkno/sofie-sofie-blueprints-integration/blob/master/src/api.ts#L72 "},{"title":"Timeline​","type":1,"pageTitle":"Concepts & Architecture","url":"docs/user-guide/concepts-and-architecture#timeline","content":""},{"title":"What is the timeline?​","type":1,"pageTitle":"Concepts & Architecture","url":"docs/user-guide/concepts-and-architecture#what-is-the-timeline","content":"The Timeline is a collection of timeline-objects, that together form a &quot;target state&quot;, i.e. an intent on what is to be played and at what times. The timeline-objects can be programmed to contain relative references to each other, so programming things like &quot;play this thing right after this other thing&quot; is as easy as {start: { #otherThing.end }} The Playout Gateway picks up the timeline from Sofie Core and (using the TSR timeline-state-resolver) controls the playout devices to make sure that they actually play what is intended.  "},{"title":"Why a timeline?​","type":1,"pageTitle":"Concepts & Architecture","url":"docs/user-guide/concepts-and-architecture#why-a-timeline","content":"The Sofie system is made to work with a modern web- and IT-based approach in mind. Therefore, the Sofie Core can be run either on-site, or in an off-site cloud.  One drawback of running in a cloud over the public internet is the - sometimes unpredictable - latency. The Timeline overcomes this by moving all the immediate control of the playout devices to the Playout Gateway, which is intended to run on a local network, close to the hardware it controls. This also gives the system a simple way of load-balancing - since the number of web-clients or load on Sofie Core won't affect the playout. Another benefit of basing the playout on a timeline is that when programming the show (the blueprints), you only have to care about &quot;what you want to be on screen&quot;, you don't have to care about cleaning up previously played things, or what was actually played out before. Those are things that are handled by the Playout Gateway automatically. This also allows the user to jump around in a rundown freely, without the risk of things going wrong on air. "},{"title":"How does it work?​","type":1,"pageTitle":"Concepts & Architecture","url":"docs/user-guide/concepts-and-architecture#how-does-it-work","content":"tip Fun tip! The timeline in itself is a separate library available on github. You can play around with the timeline in the browser using JSFiddle and the timeline-visualizer! The Timeline is stored by Sofie Core in a MongoDB collection. It is generated whenever a user does a Take, changes the Next-point or anything else that might affect the playout. Sofie Core generates the timeline using: The Studio Baseline (only if no rundown is currently active)The Showstyle Baseline, of the currently active rundown.The currently playing PartThe Next:ed Part and Parts that come after it (the Lookahead)Any AdLibs the user has manually selected to play The Playout Gateway then picks up the new timeline, and pipes it into the (TSR) timeline-state-resolver library. The TSR then... Resolves the timeline, using the timeline-libraryCalculates new target-states for each relevant point in timeMaps the target-state to each playout device.Compares the target-states for each device with the currently-tracked-state and....generates commands to send to each device to account for the change.The commands are then put on queue and sent to the devices at the correct time. info For more information about what playout devices the TSR supports, and examples of the timeline-objects, see the README of TSR info For more information about how to program timeline-objects, see the README of the timeline-library "},{"title":"Sofie Core: System Configuration","type":0,"sectionRef":"#","url":"docs/user-guide/configuration/sofie-core-settings","content":"","keywords":""},{"title":"Environment Variables​","type":1,"pageTitle":"Sofie Core: System Configuration","url":"docs/user-guide/configuration/sofie-core-settings#environment-variables","content":"Setting\tUse\tDefault value\tExampleMETEOR_SETTINGS\tContents of settings file (see below) $(cat settings.json) NTP_SERVERS\tList of time servers to sync the system to (comma separated).\t0.pool.ntp.org, 1.pool.ntp.org, 2.pool.ntp.org TZ\tThe default time zone of the server (used in logging) Europe/Amsterdam MAIL_URL\tEmail server to use. See https://docs.meteor.com/api/email.html smtps://USERNAME:PASSWORD@HOST:PORT LOG_TO_FILE\tFile path to log to file /logs/core/ "},{"title":"Settings File​","type":1,"pageTitle":"Sofie Core: System Configuration","url":"docs/user-guide/configuration/sofie-core-settings#settings-file","content":"The settings file is an optional JSON file that contains some configuration settings for how the Sofie Core works and behaves. To use a settings file: During development: meteor --settings settings.jsonDuring prod: environment variable (see above) The structure of the file allows for public and private fields. At the moment, Sofie only uses public fields. Below is an example settings file: { &quot;public&quot;: { &quot;frameRate&quot;: 25 } }  There are various settings you can set for an installation. See the list below: Field name\tUse\tDefault valueframeRate\tThe framerate used to display time-codes in the GUI\t25 defaultToCollapsedSegments\tShould all segments be collapsed by default, until the user expands them\tfalse autoRewindLeavingSegment\tShould segments be automatically rewound after they stop playing\tfalse autoExpandCurrentNextSegment\tShould the segments be expanded when they are On Air or Next, useful with defaultToCollapsedSegments\tfalse disableBlurBorder\tShould a border be displayed around the Rundown View when it's not in focus and studio mode is enabled\tfalse defaultTimeScale\tAn arbitrary number, defining the default zoom factor of the Timelines\t1 allowGrabbingTimeline\tCan Segment Timelines be grabbed to scroll them?\ttrue enableUserAccounts\tEnables User Accounts and Authentication. If disabled, all user stations will be treated as a single, anonymous user\tfalse allowUnsyncedSegments\tSwitches behavior between unsyncing entire Rundowns or just Segments\tfalse allowRundownResetOnAir\tShould the user be allowed to reset Rundowns when they are On Air\tfalse defaultDisplayDuration\tThe fallback duration of a Part, when it's expectedDuration is 0. __In milliseconds\t3000 info The exact definition for the settings can be found in the code here. "},{"title":"Settings View","type":0,"sectionRef":"#","url":"docs/user-guide/configuration/settings-view","content":"","keywords":""},{"title":"System​","type":1,"pageTitle":"Settings View","url":"docs/user-guide/configuration/settings-view#system","content":"The System settings are settings for this installation of Sofie. In here goes the settings that are applicable system-wide. caution Documentation for this section is yet to be written. "},{"title":"Studio​","type":1,"pageTitle":"Settings View","url":"docs/user-guide/configuration/settings-view#studio","content":"A Studio in Sofie-terms is a physical location, with a specific set of devices and equipment. Only one show can be on air in a studio at the same time. The studio settings are settings for that specific studio, and contains settings related to hardware and playout, such as: Attached devices - the Gateways related to this studioBlueprint configuration - custom config option defined by the blueprintsLayer Mappings - Maps the logical timeline layers to physical devices and outputs The Studio uses a studio-blueprint, which handles things like mapping up an incoming rundown to a Showstyle. "},{"title":"Attached Devices​","type":1,"pageTitle":"Settings View","url":"docs/user-guide/configuration/settings-view#attached-devices","content":"This section allows you to add and remove Gateways that are related to this Studio. When a Gateway is attached to a Studio, it will react to the changes happening within it, as well as feed the neccessary data into it. "},{"title":"Blueprint Configuration​","type":1,"pageTitle":"Settings View","url":"docs/user-guide/configuration/settings-view#blueprint-configuration","content":"Sofie allows the Blueprints to expose custom configuration fields that allow the System Administrator to reconfigure how these Blueprints work through the Sofie UI. Here you can change the configuration of the Studio Blueprint. "},{"title":"Layer Mappings​","type":1,"pageTitle":"Settings View","url":"docs/user-guide/configuration/settings-view#layer-mappings","content":"This section allows you to add, remove and configure how logical device-control will be translated to physical automation control. Blueprints control devices through objects placed on a Timeline using logical device identifiers called Layers. A layer represents a single aspect of a device that can be controlled at a given time: a video switcher's M/E bus, an audio mixers's fader, an OSC control node, a video server's output channel. Layer Mappings translate these logical identifiers into physical device aspects, for example:  This Layer Mapping configures the atem_me_program Timeline-layer to control the atem0 device of the ATEM type. No Lookahead will be enabled for this layer. This layer will control a MixEffect aspect with the Index of 0 (so M/E 1 Bus). These mappings allow the System Administrator to reconfigure what devices the Blueprints will control, without the need of changing the Blueprint code. Route Sets​ In order to allow the Producer to reconfigure the automation from the Switchboard in the Rundown View, as well as have some pre-set automation control available for the System Administrator, Sofie has a concept of Route Sets. Route Sets work on top of the Layer Mappings, by configuring sets of Layer Mappings that will re-route the control from one device to another, or to disable the automation altogether. These Route Sets are presented to the Producer in the Switchboard panel. A Route Set is essentially a distinct set of Layer Mappings, which can modify the settings already configured by the Layer Mappings, but can be turned On and Off. Called Routes, these can change: the Layer ID to a new Layer IDchange the Device being controlled by the Layerchange the aspect of the Device that's being controlled. Route Sets can be grouped into Exclusivity Groups, in which only a single Route Set can be enabled at a time. When activating a Route Set within an Exclusivity Group, all other Route Sets in that group will be deactivated. This in turn, allows the System Administrator to create entire sections of exclusive automation control within the Studio that the Producer can then switch between. One such example could be switching between Primary and Backup playout servers, or switching between Primary and Backup talent microphone.  A Route Set has a Behavior property which will dictate what happens how the Route Set operates: Type\tBehaviorACTIVATE_ONLY\tThis RouteSet cannot be deactivated, only a different RouteSet in the same Exclusivity Group can cause it to deactivate TOGGLE\tThe RouteSet can be activated and deactivated. As a result, it's possible for the Exclusivity Group to have no Route Set active HIDDEN\tThe RouteSet can be activated and deactivated, but it will not be presented to the user in the Switchboard panel  Route Sets can also be configured with a Default State. This can be used to contrast a normal, day-to-day configuration with an exceptional one (like using a backup device) in the Switchboard panel. Default State\tBehaviorActive\tIf the Route Set is not active, an indicator will be shown Not Active\tIf the Route Set is active, an indicator will be shown Not defined\tNo indicator will be shown, regardless of the Route Set state "},{"title":"Show style​","type":1,"pageTitle":"Settings View","url":"docs/user-guide/configuration/settings-view#show-style","content":"A Showstyle is related to the looks and logic of a show, which in contrast to the studio is not directly related to the hardware. The Showstyle contains settings like Source Layers - Groups different types of content in the GUIOutput Channels - Indicates different output targets (such as the Program or back-screen in the studio)Action Triggers - Select how actions can be started on a per-show basis, outside of the on-screen controlsBlueprint configuration - custom config option defined by the blueprints caution Please note the difference between Source Layers and timeline-layers: Pieces are put onto Source layers, to group different types of content (such as a VT or Camera), they are therefore intended only as something to indicate to the user what is going to be played, not what is actually going to happen on the technical level. Timeline-objects (inside of the Pieces) are put onto timeline-layers, which are (through the Mappings in the studio) mapped to physical devices and outputs. The exact timeline-layer is never exposed to the user, but instead used on the technical level to control playout. An example of the difference could be when playing a VT (that's a Source Layer), which could involve all of the timeline-layers video_player0, audio_fader_video, audio_fader_host and mixer_pgm. "},{"title":"Action Triggers​","type":1,"pageTitle":"Settings View","url":"docs/user-guide/configuration/settings-view#action-triggers","content":"This is a way to set up how - outside of the Point-and-Click Graphical User Interface - actions can be performed in the User Interface. Commonly, these are the hotkey combinations that can be used to either trigger AdLib content or other actions in the larger system. This is done by creating sets of Triggers and Actions to be triggered by them. These pairs can be set at the Show Style level or at the Sofie Core (System) level, for common actions such as doing a Take or activating a Rundown, where you want a shared method of operation. Sofie Core migrations will set up a base set of basic, system-wide Action Triggers for interacting with rundowns, but they can be changed by the System blueprint.  Triggers​ The triggers are designed to be either client-specific or issued by a peripheral device module. Currently, the Action Triggers system only supports a single, client-specific trigger type: a Hotkey. Hotkeys can be either a single key, a combination of keys (combo) or a chord - a sequnece of key combinations pressed in a particular order. Chords are popular in some text editing applications and vastly expand the amount of actions that can be triggered from a keyboard, at the expense of the time needed to execute them. Currently, the Hotkey editor in Sofie does not support creating Chords, but they can be specified by Blueprints during migrations. To edit a given trigger, click on the trigger pill on the left of the Trigger-Action set. When hovering, a + sign will appear, allowing you to add a new trigger to the set. Actions​ The actions are built using a base action (such as Activate a Rundown or AdLib) and a set of filters, limiting the scope of the action. Optionally, some of these actions can take additional parameters. These filters can operate on various types of objects, depending on the action in question. All actions currently require that the chain of filters starts with scoping out the Rundown the action is supposed to affect. Currently, there is only one type of Rundown-level filter supported: &quot;The Rundown currently in view&quot;. The Action Triggers user interface guides the user in a wizzard-like fashion through the available filter options on a given action.  If the action provides a preview of the triggered items and there is an available matching Rundown, a preview will be displayed for the matching objects in that Rundown. The system will select the current active rundown, if it is of the currently-edited ShowStyle, and if not, it will select the first available Rundown of the currently-edited ShowStyle.  Clicking on the action and filter pills allows you to edit the action parameters and filter parameters. Limit limits the amount of objects to only the first N objects matched - this can significantly improve performance on large data sets. Pick and Pick last filters end the chain of the filters by selecting a single item from the filtered set of objects (the N-th object from the beginning or the end, respectively). Pick implicitly contains a Limit for the performance improvement. This is not true for Pick last, though. "},{"title":"Migrations​","type":1,"pageTitle":"Settings View","url":"docs/user-guide/configuration/settings-view#migrations","content":"The migrations are automatic setup-scripts that help you during initial setup and system upgrades. There are system-migrations that comes directly from the version of Sofie Core you're running, and there are also migrations added by the different blueprints. It is mandatory to run migrations when you've upgraded Sofie Core to a new version, or upgraded your blueprints. "},{"title":"FAQ","type":0,"sectionRef":"#","url":"docs/user-guide/faq","content":"","keywords":""},{"title":"What software license does the system use?​","type":1,"pageTitle":"FAQ","url":"docs/user-guide/faq#what-software-license-does-the-system-use","content":"All main components are using the MIT license. "},{"title":"Is there anything missing in the public repositories?​","type":1,"pageTitle":"FAQ","url":"docs/user-guide/faq#is-there-anything-missing-in-the-public-repositories","content":"Everything needed to install and configure a fully functioning Sofie system is publicly available, with the following exceptions: A rundown data set describing the actual TV show and of media assets.Blueprints for your specific show.  "},{"title":"When will feature y become available?​","type":1,"pageTitle":"FAQ","url":"docs/user-guide/faq#when-will-feature-y-become-available","content":"Check out the issues page, where there are notes on current and upcoming releases. "},{"title":"Access Levels","type":0,"sectionRef":"#","url":"docs/user-guide/features/access-levels","content":"","keywords":""},{"title":"Basic mode​","type":1,"pageTitle":"Access Levels","url":"docs/user-guide/features/access-levels#basic-mode","content":"Without enabling any additional modes in Sofie, the browser will have minimal access to the system. It will be able to view a rundown but, will not have the ability to manipulate it. This includes activating, deactivating, or resetting the rundown as well as taking the next part, adlib, etc. "},{"title":"Studio mode​","type":1,"pageTitle":"Access Levels","url":"docs/user-guide/features/access-levels#studio-mode","content":"Studio Mode gives the current browser full control of the studio and all information associated to it. This includes allowing actions like activating and deactivating rundowns, taking parts, adlibbing, etc. This mode is accessed by adding a ?studio=1 to the end of the URL. "},{"title":"Configuration mode​","type":1,"pageTitle":"Access Levels","url":"docs/user-guide/features/access-levels#configuration-mode","content":"Configuration mode gives the user full control over the Settings pages and allows full access to the system including the ability to modify Blueprints, Studios, or Show Styles, creating and restoring Snapshots, as well as modifying attached devices. "},{"title":"Help Mode​","type":1,"pageTitle":"Access Levels","url":"docs/user-guide/features/access-levels#help-mode","content":"Enables some tooltips that might be useful to new users. This mode is accessed by adding ?help=1 to the end of the URL. "},{"title":"Admin Mode​","type":1,"pageTitle":"Access Levels","url":"docs/user-guide/features/access-levels#admin-mode","content":"This mode will give the user the same access as the Configuration and Studio modes as well as having access to a set of Test Tools and a Manual Control section on the Rundown page. This mode is enabled when ?admin=1 is added the end of the URL. "},{"title":"Testing Mode​","type":1,"pageTitle":"Access Levels","url":"docs/user-guide/features/access-levels#testing-mode","content":"Enables the page Test Tools, which contains various tools useful for testing the system during development. This mode is enabled when ?testing=1 is added the end of the URL. "},{"title":"Developer Mode​","type":1,"pageTitle":"Access Levels","url":"docs/user-guide/features/access-levels#developer-mode","content":"This mode will enable the browsers default right click menu to appear and can be accessed by adding ?develop=1 to the URL. It will also reveal the Manual Control section on the Rundown page. "},{"title":"API","type":0,"sectionRef":"#","url":"docs/user-guide/features/api","content":"","keywords":""},{"title":"REST API​","type":1,"pageTitle":"API","url":"docs/user-guide/features/api#rest-api","content":"There is a preliminary REST API available that can be used to fetch data and trigger actions. The documentation is minimal at the moment, but the API endpoints are listed by Sofie Core using the endpoint: /api/0 "},{"title":"DDP – Core Integration​","type":1,"pageTitle":"API","url":"docs/user-guide/features/api#ddp--core-integration","content":"If you're planning to build NodeJS applications that talk to Sofie Core, we recommend using the core-integration library, which exposes a number of callable methods and allows for subscribing to data the same way the Gateways do it. "},{"title":"Language","type":0,"sectionRef":"#","url":"docs/user-guide/features/language","content":"","keywords":""},{"title":"Language selection​","type":1,"pageTitle":"Language","url":"docs/user-guide/features/language#language-selection","content":"The UI will automatically detect user browser's default matching and select the best match, falling back to English. You can also force the UI language to any language by navigating to a page with ?lng=xx query string, for example: http://localhost:3000/?lng=en This choice is persisted in browser's local storage, and the same language will be used until a new forced language is chosen using this method. Sofie currently supports three languages: English (default) enNorwegian bokmål nbNorwegian nynorsk nn "},{"title":"Further Reading​","type":1,"pageTitle":"Language","url":"docs/user-guide/features/language#further-reading","content":"List of language tags "},{"title":"Prompter","type":0,"sectionRef":"#","url":"docs/user-guide/features/prompter","content":"","keywords":""},{"title":"Customize looks​","type":1,"pageTitle":"Prompter","url":"docs/user-guide/features/prompter#customize-looks","content":"The prompter UI can be configured using query parameters: Query parameter\tType\tDescription\tDefaultmirror\t0 / 1\tMirror the display horizontally\t0 mirrorv\t0 / 1\tMirror the display vertically\t0 fontsize\tnumber\tSet a custom font size of the text. 20 will fit in 5 lines of text, 14 will fit 7 lines etc..\t14 marker\tstring\tSet position of the read-marker. Possible values: &quot;center&quot;, &quot;top&quot;, &quot;bottom&quot;, &quot;hide&quot;\thide margin\tnumber\tSet margin of screen (used on monitors with overscan), in %.\t0 showmarker\t0 / 1\tIf the marker is not set to &quot;hide&quot;, control if the marker is hidden or not\t1 showscroll\t0 / 1\tWhether the scroll bar should be shown\t1 followtake\t0 / 1\tWhether the prompter should automatically scroll to current segment when the operator TAKE:s it\t1 debug\t0 / 1\tWhether to display a debug box showing controller input values and the calculated speed the prompter is currently scrolling at. Used to tweak speedMaps and ranges.\t0 Example: http://127.0.0.1/prompter/studio0/?mode=mouse&amp;followtake=0&amp;fontsize=20 "},{"title":"Controlling the prompter​","type":1,"pageTitle":"Prompter","url":"docs/user-guide/features/prompter#controlling-the-prompter","content":"The prompter can be controlled by different types of controllers. The control mode is set by a query parameter, like so: ?mode=mouse. Query parameter\tDescriptionDefault\tControlled by both mouse and keyboard ?mode=mouse\tControlled by mouse only. See configuration details ?mode=keyboard\tControlled by keyboard only. See configuration details ?mode=shuttlekeyboard\tControlled by a Contour Design ShuttleXpress, X-keys Jog and Shuttle or any compatible, configured as keyboard-ish device. See configuration details ?mode=pedal\tControlled by any MIDI device outputting note values between 0 - 127 of CC notes on channel 8. Analogue Expression pedals work well with TRS-USB midi-converters. See configuration details ?mode=joycon\tControlled by Nintendo Switch Joycon, using the HTML5 GamePad API. See configuration details Control using mouse (scroll wheel)​ The prompter can be controlled in multiple ways when using the scroll wheel: Query parameter\tDescription?controlmode=normal\tScrolling of the mouse works as &quot;normal scrolling&quot; ?controlmode=speed\tScrolling of the mouse changes the speed of scolling. Left-click to toggle, right-click to rewind ?controlmode=smoothscroll\tScrolling the mouse wheel starts continous scrolling. Small speed adjustments can then be made by nudging the scroll wheel. Stop the scrolling by making a &quot;larger scroll&quot; on the wheel. has several operating modes, described further below. All modes are intended to be controlled by a computer mouse or similar, such as a presenter tool. Control using keyboard​ Keyboard control is intended to be used when having a &quot;keyboard&quot;-device, such as a presenter tool. Scroll up\tScroll downArrow Up\tArrow Down Arrow Left\tArrow Right Page Up\tPage Down Space Control using Contour ShuttleXpress or X-keys (?mode=shuttlekeyboard)​ This mode is intended to be used when having a Contour ShuttleXpress or X-keys device, configured to work as a keyboard device. These devices have jog/shuttle wheels, and their software/firmware allow them to map scroll movement to keystrokes from any key-combination. Since we only listen for key combinations, it effectively means that any device outputing keystrokes will work in this mode. From Release 30, the speedMap has a prefix: shuttle_ (i.e. shuttle_speedMap) Key combination\tFunctionCtrl Alt F1 ... Ctrl Alt F7\tSet speed to +1 ... +7 (Scroll down) Ctrl Shift Alt F1 ... Ctrl Shift Alt F7\tSet speed to -1 ... -7 (Scroll up) Ctrl Alt +\tIncrease speed Ctrl Alt -\tDecrease speed Ctrl Alt Shift F8, Ctrl Alt Shift PageDown\tJump to next Segment and stop Ctrl Alt Shift F9, Ctrl Alt Shift PageUp\tJump to previous Segment and stop Ctrl Alt Shift F10\tJump to top of Script and stop Ctrl Alt Shift F11\tJump to Live and stop Ctrl Alt Shift F12\tJump to next Segment and stop Configuration files that can be used in their respective driver software: Contour ShuttleXpressX-keys  Control using midi input (?mode=pedal)​ This mode listens to MIDI CC-notes on channel 8, expecting a linear range like i.e. 0-127. Sutiable for use with expression pedals, but any MIDI controller can be used. The mode picks the first connected MIDI device, and supports hot-swapping (you can remove and add the device without refreshing the browser). If you want to use traditional analogue pedals with 5 volt TRS connection, a converter such as the Beat Bars EX2M will work well. From Release 30, the parameters for the pedal have a prefix: pedal_ (i.e. pedal_speedMap, pedal_reverseSpeedMap etc) Query parameter\tType\tDescription\tDefaultspeedMap\tArray of numbers\tSpeeds to scroll by (px. pr. frame - approx 60fps) when scrolling forwards. The beginning of the forwards-range maps to the first number in this array, and the end of the forwards-range map to the end of this array. All values in between are being interpolated using a spline curve.\t[1, 2, 3, 4, 5, 7, 9, 12, 17, 19, 30] reverseSpeedMap\tArray of numbers\tSame as speedMap but for the backwards range.\t[10, 30, 50] rangeRevMin\tnumber\tThe end of the backwards-range, full speed backwards.\t0 rangeNeutralMin\tnumber\tThe beginning of the backwards-range.\t35 rangeNeutralMax\tnumber\tThe minimum input to run forward, the start of the forward-range (min speed). This is also the end of any &quot;deadband&quot; you want filter out before starting moving forwards.\t80 rangeFwdMax\tnumber\tThe maximum input, the end of the forward-range (max speed)\t127 rangeNeutralMin has to be greater than rangeRevMinrangeNeutralMax has to be greater than rangeNeutralMinrangeFwdMax has to be greater than rangeNeutralMax  The default values allow for both going forwards and backwards. This matches the Yamaha FC7 expression pedal. The default values create a forward-range from 80-127, a neutral zone from 35-80 and a reverse-range from 0-35. Any movement within forward range will map to the speedMap with interpolation between any numbers in the speedMap. You can turn on ?debug=1 to see how your input maps to an output. This helps during calibration. Similarly, any movement within the backwards rage maps to the reverseSpeedMap. Calibration guide: Symptom\tAdjustment&quot;I can't rest my foot without it starting to run&quot;\tIncrease rangeNeutralMax &quot;I have to push too far before it starts moving&quot;\tDecrease rangeNeutralMax &quot;It starts out fine, but runs too fast if I push too hard&quot;\tAdd more weight to the lower part of the speedMap by adding more low values early in the map, compared to the large numbers in the end. &quot;I have to go too far back to reverse&quot;\tIncrese rangeNeutralMin &quot;As I find a good speed, it varies a bit in speed up/down even if I hold my foot still&quot;\tUse ?debug=1 to see what speed is calculated in the position the presenter wants to rest the foot in. Add more of that number in a sequence in the speedMap to flatten out the speed curve, i.e. [1, 2, 3, 4, 4, 4, 4, 5, ...] Note: The default values are set up to work with the Yamaha FC7 expression pedal, and will probably not be good for pedals with one continuous linear range from fully released to fully depressed. A suggested configuration for such pedals (i.e. the Mission Engineering EP-1) will be like: Query parameter\tSuggestionspeedMap\t[1, 2, 3, 4, 5, 7, 9, 12, 17, 19, 30] reverseSpeedMap\t-2 rangeRevMin\t-1 rangeNeutralMin\t0 rangeNeutralMax\t1 rangeFwdMax\t127 Control using Nintendo Joycon (?mode=joycon)​ This mode uses the browsers Gamapad API and polls connected Joycons for their states on button-presses and joystick inputs. The Joycons can operate in 3 modes, the L-stick, the R-stick or both L+R sticks together. Reconnections and jumping between modes works, with one known limitation: Transition from L+R to a single stick blocks all input, and requires a reconnect of the sticks you want to use. This seems to be a bug in either the Joycons themselves or in the Gamepad API in general. From Release 30, the parameters for the JoyCon have a prefix: joycon_ (i.e. joycon_speedMap, joycon_reverseSpeedMap etc) Query parameter\tType\tDescription\tDefaultspeedMap\tArray of numbes\tSpeeds to scroll by (px. pr. frame - approx 60fps) when scrolling forwards. The beginning of the forwards-range maps to the first number in this array, and thee end of the forwards-range map to the end of this array. All values in between are being interpolated in a spline curve.\t[1, 2, 3, 4, 5, 8, 12, 30] reverseSpeedMap\tArray of numbers\tSame as speedMap but for the backwards range.\t[1, 2, 3, 4, 5, 8, 12, 30] rangeRevMin\tnumber\tThe end of the backwards-range, full speed backwards.\t-1 rangeNeutralMin\tnumber\tThe beginning of the backwards-range.\t-0.25 rangeNeutralMax\tnumber\tThe minimum input to run forward, the start of the forward-range (min speed). This is also the end of any &quot;deadband&quot; you want filter out before starting moving forwards.\t0.25 rangeFwdMax\tnumber\tThe maximum input, the end of the forward-range (max speed)\t1 rangeNeutralMin has to be greater than rangeRevMinrangeNeutralMax has to be greater than rangeNeutralMinrangeFwdMax has to be greater than rangeNeutralMax  You can turn on ?debug=1 to see how your input maps to an output. Button map: Button\tActonL2 / R2\tGo to the &quot;On-air&quot; story L / R\tGo to the &quot;Next&quot; story Up / X\tGo top the top Left / Y\tGo to the previous story Right / A\tGo to the following story Calibration guide: Symptom\tAdjustment&quot;The prompter drifts upwards when I'm not doing anything&quot;\tDecrease rangeNeutralMin &quot;The prompter drifts downwards when I'm not doing anything&quot;\tIncrease rangeNeutralMax &quot;It starts out fine, but runs too fast if I move too far&quot;\tAdd more weight to the lower part of the speedMap / reverseSpeedMap by adding more low values early in the map, compared to the large numbers in the end. &quot;I can't reach max speed backwards&quot;\tIncrease rangeRevMin &quot;I can't reach max speed forwards&quot;\tDecrease rangeFwdMax &quot;As I find a good speed, it varies a bit in speed up/down even if I hold my finger still&quot;\tUse ?debug=1 to see what speed is calculated in the position the presenter wants to rest their finger in. Add more of that number in a sequence in the speedMap to flatten out the speed curve, i.e. [1, 2, 3, 4, 4, 4, 4, 5, ...] "},{"title":"Sofie Views","type":0,"sectionRef":"#","url":"docs/user-guide/features/sofie-views","content":"","keywords":""},{"title":"Lobby View​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#lobby-view","content":" All existing rundowns are listed in the Lobby View. "},{"title":"Rundown View​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#rundown-view","content":" The Rundown View is the main view that the producer is working in.   Take Point​ The Take point is currently playing Part in the rundown, indicated by the &quot;On Air&quot; line in the GUI. What's played on air is calculated from the timeline objects in the Pieces in the currently playing part. The Pieces inside of a Part determines what's going to happen, the could be indicating things like VT:s, cut to cameras, graphics, or what script the host is going to read. info You can TAKE the next part by pressing F12 or the Numpad Enter key. Next Point​ The Next point is the next queued Part in the rundown. When the user clicks Take, the Next Part becomes the currently playing part, and the Next point is also moved. info Change the Next point by right-clicking in the GUI, or by pressing (Shift +) F9 &amp; F10. Freeze-frame Countdown​  If a Piece has more or less content than the Part's expected duration allows, an additional counter with a Snowflake icon will be displayed, attached to the On Air line, counting down to the moment when content from that Piece will freeze-frame at the last frame. The time span in which the content from the Piece will be visible on the output, but will be frozen, is displayed with an overlay of icicles. Lookahead​ Elements in the Next point (or beyond) might be pre-loaded or &quot;put on preview&quot;, depending on the blueprints and playout devices used. This feature is called &quot;Lookahead&quot;. "},{"title":"Storyboard Mode​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#storyboard-mode","content":"To the left side of the Zoom buttons, there's a button controlling the display style of a given Segment. The default display style of a Segment can be indicated by the Blueprints, but the User can switch to a different mode at any time.  The Storyboard mode is an alternative to the default Timeline mode. In Storyboard mode, the accurate placement in time of each Piece is not visualized, so that more Parts can be visualized at once. This can be particularly useful in Shows without very strict timing planning or where timing is not driven by the User, but rather some external factor; or in Shows where very long Parts are joined with very short ones: sports, events and debates. This mode also does not visualize the history of the playback: rather, it only shows what is currently On Air or is planned to go On Air. Storyboard mode selects a &quot;main&quot; Piece of the Part, using the same logic as the Presenter View, and presents it with a big, hover-scrub-enabled thumbnail for easy preview. The countdown to freeze-frame is displayed in the top-right hand corner of the Thumbnail, once less than 10 seconds remain to freeze-frame. The Transition Piece is displayed on top of the thumbnail. Other Pieces are placed below the thumbnail, stacked in order of playback. After a Piece goes off-air, it will dissapear from the view. If no more Parts can be displayed in a given Segment, they are stacked in order on the right side of the Segment. The User can scroll through thse Parts by click-and-dragging the Storyboard area, or using the mouse wheel - Alt+Wheel, if only a vertical wheel is present in the mouse. All user interactions work in the Storyboard mode the same as in Timeline mode: Takes, AdLibs, Holds and moving the Next Point around the Rundown. "},{"title":"Segment Header Countdowns​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#segment-header-countdowns","content":" Left: Segment Time BudgetRight: Segment Countdown Clock on the left is an indicator of how much time has been spent playing Parts from that Segment in relation to how much time was planned for Parts in that Segment. If more time was spent playing than was planned for, this clock will turn red, there will be a **+** sign in front of it and will begin counting upwards. In the illustration above, the first Segment (Ny Sak) has been playing for 4 minutes and 25 seconds longer than it was planned for. The second segment (Direkte Strømstad) is planned to play for 4 minutes and 40 seconds. There are 5 minutes and 46 seconds worth of content between the current On Air line (which is in the first Segment) and the second Segment. If you click on the Segment header countdowns, you can switch the Segment Countdown to a Segment OnAir Clock where this will show the time-of-day when a given Segment is expected to air.  "},{"title":"Rundown Dividers​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#rundown-dividers","content":"When using a workflow and blueprints that combine multiple NRCS Rundowns into a single Sofie Rundown (such as when using the &quot;Ready To Air&quot; functionality in AP ENPS), information about these individual NRCS Rundowns will be inserted into the Rundown View at the point where each of these incoming Rundowns start.  For reference, these headers show the Name, Planned Start and Planned Duration of the individual NRCS Rundown. "},{"title":"Shelf​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#shelf","content":"The shelf contains lists of AdLibs that can be played out.  info The Shelf can be opened by clicking the handle at the bottom of the screen, or by pressing the TAB key "},{"title":"Shelf Layouts​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#shelf-layouts","content":"The Rundown View and the Detached Shelf View UI can have multiple concurrent layouts for any given Show Style. The automatic selection mechanism works as follows: select the first layout of the RUNDOWN_LAYOUT type,select the first layout of any type,use the default layout (no additional filters), in the style of RUNDOWN_LAYOUT. To use a specific layout in these views, you can use the ?layout=... query string, providing either the ID of the layout or a part of the name. This string will then be mached against all available layouts for the Show Style, and the first matching will be selected. For example, for a layout called Stream Deck layout, to open the currently active rundown's Detached Shelf use: http://localhost:3000/activeRundown/studio0/shelf?layout=Stream The Detached Shelf view with a custom DASHBOARD_LAYOUT allows displaying the Shelf on an auxiliary touch screen, tablet or a Stream Deck device. A specialized Stream Deck view will be used if the view is opened on a device with hardware characteristics matching a Stream Deck device. The shelf also contains additional elements, not controlled by the Rundown View Layout. These include Buckets and the Inspector. If needed, these components can be displayed or hidden using additional url arguments: Query parameter\tDescriptionDefault\tDisplay the rundown layout (as selected), all buckets and the inspector ?display=layout,buckets,inspector\tA comma-separated list of features to be displayed in the shelf ?buckets=0,1,...\tA comma-separated list of buckets to be displayed display: Available values are: layout (for displaying the Rundown Layout), buckets (for displaying the Buckets) and inspector (for displaying the Inspector).buckets: The buckets can be specified as base-0 indices of the buckets as seen by the user. This means that ?buckets=1 will display the second bucket as seen by the user when not filtering the buckets. This allows the user to decide which bucket is displayed on a secondary attached screen simply by reordering the buckets on their main view. Note: the Inspector is limited in scope to a particular browser window/screen, so do not expect the contents of the inspector to sync across multiple screens. For the purpose of running the system in a studio environment, there are some additional views that can be used for various purposes: "},{"title":"Sidebar Panel​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#sidebar-panel","content":"Switchboard​  The Switchboard allows the producer to turn automation On and Off for sets of devices, as well as re-route automation control between devices - both with an active rundown and when no rundown is active in a Studio. The Switchboard panel can be accessed from the Rundown View's right-hand Toolbar, by clicking on the Switchboard button, next to the Support panel button. info Technically, the switchboard activates and deactivates Route Sets. The Route Sets are grouped by Exclusivity Group. If an Exclusivity Group contains exactly two elements with the ACTIVATE_ONLY mode, the Route Sets will be displayed on either side of the switch. Otherwise, they will be displayed separately in a list next to an Off position. See also Settings ● Route sets. "},{"title":"Prompter View​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#prompter-view","content":"/prompter/:studioId  A fullscreen page which displays the prompter text for the currently active rundown. The prompter can be controlled and configured in various ways, see more at the Prompter documentation. If no Rundown is active in a given studio, the Screensaver will be displayed. "},{"title":"Presenter View​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#presenter-view","content":"/countdowns/:studioId/presenter  A fullscreen page, intended to be shown to the studio presenter. It displays countdown timers for the current and next items in the rundown. If no Rundown is active in a given studio, the Screensaver will be shown. "},{"title":"Presenter View Overlay​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#presenter-view-overlay","content":" A fullscreen view with transparent background, intended to be shown to the studio presenter as an overlay on top of the produced PGM signal. It displays a reduced amount of the information from the regular Presenter screen: the countdown to the end of the current Part, a summary preview (type and name) of the next item in the Rundown and the current time of day. If no Rundown is active it will show the name of the Studio. "},{"title":"Active Rundown View​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#active-rundown-view","content":"/activeRundown/:studioId  A page which automatically displays the currently active rundown. Can be useful for the producer to have on a secondary screen. "},{"title":"Active Rundown – Shelf​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#active-rundown--shelf","content":"/activeRundown/:studioId/shelf  A view which automatically displays the currently active rundown, and shows the Shelf in full screen. Can be useful for the producer to have on a secondary screen. A shelf layout can be selected by modifying the query string, see Shelf Layouts. "},{"title":"Specific Rundown – Shelf​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#specific-rundown--shelf","content":"/rundown/:rundownId/shelf Displays the shelf in fullscreen for a rundown "},{"title":"Screensaver​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#screensaver","content":"When big screen displays (like Prompter and the Presenter screen) do not have any meaningful content to show, an animated screensaver showing the current time and the next planned show will be displayed. If no Rundown is upcoming, the Studio name will be displayed.  "},{"title":"System Status​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#system-status","content":"caution Documentation for this feature is yet to be written. System and devices statuses are displayed here. info An API endpoint for the system status is also available under the URL /health "},{"title":"Media Status View​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#media-status-view","content":"caution Documentation for this feature is yet to be written. This page displays media transfer statuses. "},{"title":"Message Queue View​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#message-queue-view","content":"caution Documentation for this feature is yet to be written. Sofie Core can send messages to external systems (such as metadata, as-run-logs) while on air. These messages are retained for a period of time, and can be reviewed in this list. Messages that was not successfully sent can be inspected and re-sent here. "},{"title":"User Log View​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#user-log-view","content":"The user activity log contains a list of the user-actions that users have previously done. This is used in troubleshooting issues on-air.  "},{"title":"Columns, explained​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#columns-explained","content":"Execution time​ The execution time column displays coreDuration + gatewayDuration (timelineResolveDuration)&quot;: coreDuration : The time it took for Core to execute the command (ie start-of-command 🠺 stored-result-into-database)gatewayDuration : The time it took for Playout Gateway to execute the timeline (ie stored-result-into-database 🠺 timeline-resolved 🠺 callback-to-core)timelineResolveDuration: The duration it took in TSR (in Playout Gateway) to resolve the timeline Important to note is that gatewayDuration begins at the exact moment coreDuration ends. So coreDuration + gatewayDuration is the full time it took from beginning-of-user-action to the timeline-resolved (plus a little extra for the final callback for reporting the measurement). Action​ Describes what action the user did; e g pressed a key, clicked a button, or selected a meny item. Method​ The internal name in Sofie Core of what function was called Status​ The result of the operation. &quot;Success&quot; or an error message. "},{"title":"Evaluations​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#evaluations","content":"When a broadcast is done, users can input feedback about how the show went in an evaluation form. info Evaluations can be configured to be sent to Slack, by setting the &quot;Slack Webhook URL&quot; in the Settings View under Studio. "},{"title":"Settings View​","type":1,"pageTitle":"Sofie Views","url":"docs/user-guide/features/sofie-views#settings-view","content":"The Settings View is only available to users with the Access Level set correctly. "},{"title":"Further Reading","type":0,"sectionRef":"#","url":"docs/user-guide/further-reading","content":"","keywords":""},{"title":"Getting Started​","type":1,"pageTitle":"Further Reading","url":"docs/user-guide/further-reading#getting-started","content":"Sofie's Concepts &amp; Architecture Gateways Blueprints Ask questions in the Sofie Slack Channel "},{"title":"Installation & Setup​","type":1,"pageTitle":"Further Reading","url":"docs/user-guide/further-reading#installation--setup","content":""},{"title":"Installing Sofie Core​","type":1,"pageTitle":"Further Reading","url":"docs/user-guide/further-reading#installing-sofiecore","content":"Windows install for DockerLinux install instructions for DockerLinux install instructions for Docker ComposeSofie Core Docker File Download "},{"title":"Installing a Gateway​","type":1,"pageTitle":"Further Reading","url":"docs/user-guide/further-reading#installing-a-gateway","content":"Ingest Gateways and NRCS​ MOS Protocol Overview &amp; DocumentationInformation about ENPS on The Associated Press' WebsiteInformation about iNews: Avid's Website Google Spreadsheet Gateway Demo Blueprints on GitHub's website.Example Rundown provided by Sofie.Google Sheets API on the Google Developer website. "},{"title":"Additional Software & Hardware​","type":1,"pageTitle":"Further Reading","url":"docs/user-guide/further-reading#additional-software--hardware","content":"Installing CasparCG Server for Sofie​ NRK's version of CasparCG Server on GitHub.Media Scanner on GitHub.CasparCG Launcher on GitHub.Microsoft Visual C++ 2015 Redistributable on Microsoft's website.Blackmagic Design's DeckLink Cards on Blackmagic Design's website. Check the DeckLink cards section for compatibility.Installing a DeckLink Card as a PDF.Blackmagic Design 'Desktop Video' Driver Download on Blackmagic Design's website.CasparCG Server Configuration Validator Additional Resources Viz graphics through MSE, info on the Vizrt website.Information about the Blackmagic Design's HyperDeck "},{"title":"FAQ, Progress, and Issues​","type":1,"pageTitle":"Further Reading","url":"docs/user-guide/further-reading#faq-progress-and-issues","content":"MIT LicenceReleases and Issues on GitHub "},{"title":"Introduction: Installing a Gateway","type":0,"sectionRef":"#","url":"docs/user-guide/installation/installing-a-gateway/intro","content":"","keywords":""},{"title":"Rundown & Newsroom Gateways​","type":1,"pageTitle":"Introduction: Installing a Gateway","url":"docs/user-guide/installation/installing-a-gateway/intro#rundown--newsroom-gateways","content":"Google Spreadsheet GatewayiNEWS GatewayMOS Gateway "},{"title":"Playout & Media Manager Gateways​","type":1,"pageTitle":"Introduction: Installing a Gateway","url":"docs/user-guide/installation/installing-a-gateway/intro#playout--media-manager-gateways","content":"Playout GatewayMedia Manager "},{"title":"Playout Gateway","type":0,"sectionRef":"#","url":"docs/user-guide/installation/installing-a-gateway/playout-gateway","content":"Playout Gateway The Playout Gateway handles interacting external pieces of hardware or software by sending commands that will playout rundown content. This gateway used to be a separate installation but it has since been moved into the main Sofie Core component.","keywords":""},{"title":"Initial Sofie Core Setup","type":0,"sectionRef":"#","url":"docs/user-guide/installation/initial-sofie-core-setup","content":"Initial Sofie Core Setup Prerequisites​ Installed and running Sofie Core Once Sofie Core has been installed and is running you can begin setting it up. The first step is to navigate to the Settings page. Please review the Sofie Access Level page for assistance getting there. To upgrade to a newer version or installation of new blueprints, Sofie needs to run its &quot;Upgrade database&quot; procedure to migrate data and pre-fill various settings. You can do this by clicking the Upgrade Database button in the menu. Fill in the form as prompted and continue by clicking Run Migrations Procedure. Sometimes you will need to go through multiple steps before the upgrade is finished. Next, you will need to add some Blueprints and add Gateways to allow Sofie to interpret rundown data and then play out things.","keywords":""},{"title":"iNEWS Gateway","type":0,"sectionRef":"#","url":"docs/user-guide/installation/installing-a-gateway/rundown-or-newsroom-system-connection/inews-gateway","content":"","keywords":""},{"title":"Installing iNEWS for Sofie​","type":1,"pageTitle":"iNEWS Gateway","url":"docs/user-guide/installation/installing-a-gateway/rundown-or-newsroom-system-connection/inews-gateway#installing-inews-for-sofie","content":"The iNEWS Gateway allows you to create rundowns from within iNEWS and sync them with the Sofie Core. The rundowns will update in real time and any changes made will be seen from within your Playout Timeline. The setup for the iNEWS Gateway is already in the Docker Compose file you downloaded earlier. Remove the # symbol from the start of the line labeled image: tv2/inews-ftp-gateway:develop and add a # to the other ingest gateway that was being used. Although the iNEWS Gateway is available free of charge, an iNEWS license is not. Visit Avid's website to find an iNEWS reseller that handles your geographic area. "},{"title":"Rundown & Newsroom Systems","type":0,"sectionRef":"#","url":"docs/user-guide/installation/installing-a-gateway/rundown-or-newsroom-system-connection/intro","content":"","keywords":""},{"title":"Further Reading​","type":1,"pageTitle":"Rundown & Newsroom Systems","url":"docs/user-guide/installation/installing-a-gateway/rundown-or-newsroom-system-connection/intro#further-reading","content":"MOS Protocol Overview &amp; DocumentationiNEWS on Avid's WebsiteENPS on The Associated Press' Website "},{"title":"MOS Gateway","type":0,"sectionRef":"#","url":"docs/user-guide/installation/installing-a-gateway/rundown-or-newsroom-system-connection/mos-gateway","content":"MOS Gateway The MOS Gateway communicates with a device that supports the MOS protocol to ingest and remain in sync with a rundown. It can connect to any editorial system (NRCS) that uses version 2.8.4 of the MOS protocol, such as ENPS, and sync their rundowns with the Sofie Core. The rundowns are kept updated in real time and any changes made will be seen in the Sofie GUI. The setup for the MOS Gateway is handled in the Docker Compose in the Quick Install page. One thing to note if managing the mos-gateway manually: It needs a few ports open (10540, 10541) for MOS-messages to be pushed to it from the NCS.","keywords":""},{"title":"Installing Blueprints","type":0,"sectionRef":"#","url":"docs/user-guide/installation/installing-blueprints","content":"","keywords":""},{"title":"System Blueprint​","type":1,"pageTitle":"Installing Blueprints","url":"docs/user-guide/installation/installing-blueprints#system-blueprint","content":"System Blueprints handles some basic functionality on how the Sofie system will operate. After you've uploaded the your system-blueprint js-file, click Assign in the blueprint-page to assign it as system-blueprint. "},{"title":"Studio Blueprint​","type":1,"pageTitle":"Installing Blueprints","url":"docs/user-guide/installation/installing-blueprints#studio-blueprint","content":"Studio Blueprints determine how Sofie will interact with the hardware in your studio. After you've uploaded the your studio-blueprint js-file, navigate to a Studio in the settings and assign the new Blueprint to it (under the label Blueprint ). After having installed the Blueprint, the Studio's baseline will need to be reloaded. On the Studio page, click the button Reload Baseline. This will also be needed whenever you have changed any settings. "},{"title":"Show Style Blueprint​","type":1,"pageTitle":"Installing Blueprints","url":"docs/user-guide/installation/installing-blueprints#show-style-blueprint","content":"Show Style Blueprints determine how your show will look / feel. After you've uploaded the your show-style-blueprint js-file, navigate to a Show Style in the settings and assign the new Blueprint to it (under the label Blueprint ). "},{"title":"Further Reading​","type":1,"pageTitle":"Installing Blueprints","url":"docs/user-guide/installation/installing-blueprints#further-reading","content":"Blueprints Supporting the Spreadsheet Gateway "},{"title":"Google Spreadsheet Gateway","type":0,"sectionRef":"#","url":"docs/user-guide/installation/installing-a-gateway/rundown-or-newsroom-system-connection/installing-sofie-with-google-spreadsheet-support","content":"","keywords":""},{"title":"Example Blueprints for Spreadsheet Gateway​","type":1,"pageTitle":"Google Spreadsheet Gateway","url":"docs/user-guide/installation/installing-a-gateway/rundown-or-newsroom-system-connection/installing-sofie-with-google-spreadsheet-support#example-blueprints-for-spreadsheet-gateway","content":"To begin with, you will need to install a set of Blueprints that can handle the data being sent from the Gateway to Sofie Core. Download the demo-blueprints-r*.zip file containing the blueprints you need from the Demo Blueprints GitHub Repository. It is recommended to choose the newest release but, an older Sofie Core version may require a different Blueprint version. The Rundown page will warn you about any issue and display the desired versions. Instructions on how to install any Blueprint can be found in the Installing Blueprints section from earlier. "},{"title":"Spreadsheet Gateway Configuration​","type":1,"pageTitle":"Google Spreadsheet Gateway","url":"docs/user-guide/installation/installing-a-gateway/rundown-or-newsroom-system-connection/installing-sofie-with-google-spreadsheet-support#spreadsheet-gateway-configuration","content":"If you are using the Docker version of Sofie, then the Spreadsheet Gateway will come preinstalled. For those who are not, please follow the instructions listed on the GitHub page labeled Installation (for developers). Once the Gateway has been installed, you can navigate to the Settings page and check the newly added Gateway is listed as Spreadsheet Gateway under the Devices section. Before you select the Device, you want to add it to the current Studio you are using. Select your current Studio from the menu and navigate to the Attached Devices option. Click the + icon and select the Spreadsheet Gateway. Now you can select the Device from the Devices menu and click the link provided to enable your Google Drive API to send files to the Sofie Core. The page that opens will look similar to the image below. xx Make sure to follow the steps in Create a project and enable the API and enable the Google Drive API as well as the Google Sheets API. Your &quot;APIs and services&quot; Dashboard should now look as follows:  Now follow the steps in Create credentials and make sure to create an OAuth Client ID for a Desktop App and download the credentials file.  Use the button to download the configuration to a file and navigate back to Sofie Core's Settings page. Select the Spreadsheet Gateway, then click the Browse button and upload the configuration file you just downloaded. A new link will appear to confirm access to your google drive account. Select the link and in the new window, select the Google account you would like to use. Currently, the Sofie Core Application is not verified with Google so you will need to acknowledge this and proceed passed the unverified page. Click the Advanced button and then click Go to QuickStart ( Unsafe ). After navigating through the prompts you are presented with your verification code. Copy this code into the input field on the Settings page and the field should be removed. A message confirming the access token was saved will appear. You can now navigate to your Google Drive account and create a new folder for your rundowns. It is important that this folder has a unique name. Next, navigate back to Sofie Core's Settings page and add the folder name to the appropriate input. The indicator should now read Good, Watching folder 'Folder Name Here'. Now you just need an example rundown. Navigate to this Google Sheets file and select the File menu and then select Make a copy. In the popup window, select My Drive and then navigate to and select the rundowns folder you created earlier. At this point, one of two things will happen. If you have the Google Sheets API enabled, this is different from the Google Drive API you enabled earlier, then the Rundown you just copied will appear in the Rundown page and is accessible. The other outcome is the Spreadsheet Gateway status reads Unknown, Initializing... which most likely means you need to enable the Google Sheets API. Navigate to the Google Sheets API Dashboard with this link and click the Enable button. Navigate back to Sofie's Settings page and restart the Spreadsheet Gateway. The status should now read, Good, Watching folder 'Folder Name Here' and the rundown will appear in the Rundown page. "},{"title":"Further Reading​","type":1,"pageTitle":"Google Spreadsheet Gateway","url":"docs/user-guide/installation/installing-a-gateway/rundown-or-newsroom-system-connection/installing-sofie-with-google-spreadsheet-support#further-reading","content":"Demo Blueprints GitHub Page for DevelopersExample Rundown provided by Sofie.Google Sheets API on the Google Developer website.Spreadsheet Gateway GitHub Page for Developers "},{"title":"Additional Software & Hardware","type":0,"sectionRef":"#","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/","content":"","keywords":""},{"title":"Playout & Recording​","type":1,"pageTitle":"Additional Software & Hardware","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/#playout--recording","content":"CasparCG Graphics and Video Server - Graphics / Playout / RecordingBlackmagic Design's HyperDeck - Recording Quantel Solutions - PlayoutVizrt Graphics Solutions - Graphics / Playout "},{"title":"Vision Mixers​","type":1,"pageTitle":"Additional Software & Hardware","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/#vision-mixers","content":"Blackmagic's ATEM hardware vision mixersvMix software vision mixer (coming soon) "},{"title":"Audio Mixers​","type":1,"pageTitle":"Additional Software & Hardware","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/#audio-mixers","content":"Sisyfos audio controllerLawo sound mixers, using emberplus protocolGeneric OSC (open sound control) "},{"title":"PTZ Cameras​","type":1,"pageTitle":"Additional Software & Hardware","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/#ptz-cameras","content":"Panasonic PTZ cameras "},{"title":"Lights​","type":1,"pageTitle":"Additional Software & Hardware","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/#lights","content":"Pharos light control "},{"title":"Other​","type":1,"pageTitle":"Additional Software & Hardware","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/#other","content":"Generic OSC (open sound control)Generic HTTP requests (to control http-REST interfaces)Generic TCP-socket "},{"title":"Adding FFmpeg and FFprobe to your PATH on Windows","type":0,"sectionRef":"#","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/ffmpeg-installation","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Adding FFmpeg and FFprobe to your PATH on Windows","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/ffmpeg-installation#installation","content":"FFmpeg and FFprobe can be downloaded from the FFmpeg Downloads page under the &quot;Get packages &amp; executable files&quot; heading. At the time of writing, there are two sources of Windows builds: gyan.dev and BtbN -- either one will work. Once downloaded, extract the archive to some place permanent such as C:\\Program Files\\FFmpeg. You should end up with a bin folder inside of C:\\Program Files\\FFmpeg and in that bin folder should be three executables: ffmpeg.exe, ffprobe.exe, and ffplay.exe. Open your Start Menu and type path. An option named &quot;Edit the system environment variables&quot; should come up. Click on that option to open the System Properties menu. In the System Properties menu, click the &quot;Environment Varibles...&quot; button at the bottom of the &quot;Advanced&quot; tab. If you installed FFmpeg and FFprobe to a system-wide location such as C:\\Program Files\\FFmpeg, select and edit the Path variable under the &quot;System variables&quot; heading. Else, if you installed them to some place specific to your user account, edit the Path variable under the &quot;User variables for &lt;YOUR ACCOUNT NAME&gt;&quot; heading. In the window that pops up when you click &quot;Edit...&quot;, click &quot;New&quot; and enter the path to the bin folder you extracted earlier. Then, click OK to add it. Click &quot;OK&quot; to close the Environment Variables window, and then click &quot;OK&quot; again to close the System Properties window. Verify that it worked by opening a Command Prompt and executing the following commands: ffmpeg -version ffprobe -version If you see version output from both of those commands, then you are all set! If not, double check the paths you entered and try restarting your computer. "},{"title":"Configuring Vision Mixers","type":0,"sectionRef":"#","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/vision-mixers","content":"","keywords":""},{"title":"ATEM – Blackmagic Design​","type":1,"pageTitle":"Configuring Vision Mixers","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/vision-mixers#atem--blackmagic-design","content":"The Playout Gateway supports communicating with the entire line up of Blackmagic Design's ATEM vision mixers. "},{"title":"Connecting Sofie​","type":1,"pageTitle":"Configuring Vision Mixers","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/vision-mixers#connecting-sofie","content":"Once your ATEM is properly configured on the network, you can add it as a device to the Sofie Core. To begin, navigate to the Settings page and select the Playout Gateway under Devices. Under the Sub Devices section, you can add a new device with the + button. Edit it the new device with the pencil ( edit ) icon add the host IP and port for your ATEM. Once complete, you should see your ATEM in the Attached Sub Devices section with a Good status indicator. "},{"title":"Additional Information​","type":1,"pageTitle":"Configuring Vision Mixers","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/vision-mixers#additional-information","content":"Sofie does not support connecting to a vision mixer hardware panels. All interacts with the vision mixers must be handled within a Rundown. "},{"title":"Installing CasparCG Server for Sofie","type":0,"sectionRef":"#","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/casparcg-server-installation","content":"","keywords":""},{"title":"Installing the CasparCG Server​","type":1,"pageTitle":"Installing CasparCG Server for Sofie","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/casparcg-server-installation#installing-the-casparcgserver","content":"To begin, download the latest release of CasparCG Server from GitHub. There are multiple versions of CasparCG Server available to the public for download but, you specifically want the latest NRK version. Once downloaded, extract the files and navigate down the folders, CasparCG Server then Server. This folder contains your CasparCG Server Configuration file, casparcg.config, and your CasparCG Server executable, casparcg.exe. How you will configure the CasparCG Server will depend on the number of DeckLink cards your machine contains. The first subsection for each CasparCG Server setup, labeled Channels, will contain the unique portion of the configuration. The following is the majority of the configuration file that will be consistent between setups. &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;configuration&gt; &lt;log-level&gt;debug&lt;/log-level&gt; &lt;thumbnails&gt; &lt;generate-thumbnails&gt;false&lt;/generate-thumbnails&gt; &lt;/thumbnails&gt; &lt;!-- Paths to the Server Media --&gt; &lt;!-- Currently set to the same folder as this file --&gt; &lt;paths&gt; &lt;media-path&gt;media/&lt;/media-path&gt; &lt;log-path&gt;log/&lt;/log-path&gt; &lt;data-path&gt;data/&lt;/data-path&gt; &lt;template-path&gt;template/&lt;/template-path&gt; &lt;thumbnail-path&gt;thumbnail/&lt;/thumbnail-path&gt; &lt;font-path&gt;font/&lt;/font-path&gt; &lt;/paths&gt; &lt;lock-clear-phrase&gt;secret&lt;/lock-clear-phrase&gt; &lt;channels&gt; &lt;!-- Unique portion of the configuration --&gt; &lt;/channels&gt; &lt;controllers&gt; &lt;tcp&gt; &lt;port&gt;5250&lt;/port&gt; &lt;protocol&gt;AMCP&lt;/protocol&gt; &lt;/tcp&gt; &lt;tcp&gt; &lt;port&gt;3250&lt;/port&gt; &lt;protocol&gt;LOG&lt;/protocol&gt; &lt;/tcp&gt; &lt;/controllers&gt; &lt;/configuration&gt;  One additional note, the Server does require the configuration file be named casparcg.config. "},{"title":"Installing CasparCG Media Scanner​","type":1,"pageTitle":"Installing CasparCG Server for Sofie","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/casparcg-server-installation#installing-casparcg-media-scanner","content":"You can use the CasparCG Media Scanner to locate and add all of your media to the Sofie Core. To install the Media Scanner, you will go to the project's Release page and download the .zip file under the latest release. Similar to the CasparCG Server, you want to use the NRK version. Once downloaded and extracted, move the scanner.exe file to the same folder as your casparcg.exe file. "},{"title":"Installing the CasparCG Launcher​","type":1,"pageTitle":"Installing CasparCG Server for Sofie","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/casparcg-server-installation#installing-the-casparcg-launcher","content":"You can launch both of your CasparCG applications with the CasparCG Launcher. Download the .exe file in the latest release and once complete, move the file to the same folder as your casparcg.exe file. "},{"title":"Configuring Windows​","type":1,"pageTitle":"Installing CasparCG Server for Sofie","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/casparcg-server-installation#configuring-windows","content":""},{"title":"Required Software​","type":1,"pageTitle":"Installing CasparCG Server for Sofie","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/casparcg-server-installation#required-software","content":"Windows will require you install Microsoft's Visual C++ 2015 Redistributable to run the CasparCG Server properly. Before downloading the redistributable, please ensure it is not already installed on your system. Open your programs list and in the popup window, you can search for C++ in the search field. If Visual C++ 2015 appears, you do not need install the redistributable. If you need to install redistributable then, navigate to Microsoft's website and download it from there. Once downloaded, you can run the .exe file and follow the prompts. "},{"title":"Hardware Recommendations​","type":1,"pageTitle":"Installing CasparCG Server for Sofie","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/casparcg-server-installation#hardware-recommendations","content":"Although CasparCG Server can be run on some lower end hardware, it is only recommended to do so for non-production uses. Below is a table of the minimum and preferred specs depending on what type of system you are using. System Type\tMin CPU\tPref CPU\tMin GPU\tPref GPU\tMin Storage\tPref StorageDevelopment\ti5 Gen 6i7 Gen 6\tGTX 1050\tGTX 1060\tGTX 1060\tNVMe SSD 500gb Prod, 1 Card\ti7 Gen 6\ti7 Gen 7\tGTX 1060\tGTX 1070\tNVMe SSD 500gb\tNVMe SSD 500gb Prod, 2 Cards\ti9 Gen 8\ti9 Gen 10 Extreme Edition\tRTX 2070\tQuadro P4000\tDual Drives\tDual Drives For dual drives, it is recommended to use a smaller 250gb NVMe SSD for the operating system. Then a faster 1tb NVMe SSD for the CasparCG Server and media. It is also recommended to buy a drive with about 40% storage overhead. This is for SSD performance reasons and Sofie will warn you about this if your drive usage exceeds 60%. "},{"title":"DeckLink Cards​","type":1,"pageTitle":"Installing CasparCG Server for Sofie","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/casparcg-server-installation#decklink-cards","content":"There are a few SDI cards made by Blackmagic Design that are supported by CasparCG. The base model, with four bi-directional input and outputs, is the Duo 2. If you need additional channels, use the Quad 4 which supports eight bi-directional inputs and outputs. Be aware the BNC connections are not the standard BNC type. B&amp;H offers Mini BNC to BNC connecters. Finally, for 4k support, use the 8K Pro which has four bi-directional BNC connections and one reference connection. Here is the Blackmagic Design PDF for installing your DeckLink card ( Desktop Video Device ). Once the card in installed in your machine, you will need to download the controller from Blackmagic's website. Navigate to this support page, it will only display Desktop Video Support, and in the Latest Downloads column download the most recent version of Desktop Video. Before installing, save your work because Blackmagic's installers will force you to restart your machine. Once booted back up, you should be able to launch the Desktop Video application and see your DeckLink card.  Click the icon in the center of the screen to open the setup window. Each production situation will very in frame rate and resolution so go through the settings and set what you know. Most things are set to standards based on your region so the default option will most likely be correct.  If you chose a DeckLink Duo, then you will also need to set SDI connectors one and two to be your outputs.  "},{"title":"Hardware-specific Configurations​","type":1,"pageTitle":"Installing CasparCG Server for Sofie","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/casparcg-server-installation#hardware-specific-configurations","content":""},{"title":"Preview Only (Basic)​","type":1,"pageTitle":"Installing CasparCG Server for Sofie","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/casparcg-server-installation#preview-only-basic","content":"A preview only version of CasparCG Server does not lack any of the features of a production version. It is called a preview only version because the standard outputs on a computer, without a DeckLink card, do not meet the requirements of a high quality broadcast graphics machine. It is perfectly suitable for development though. Required Hardware​ No additional hardware is required, just the computer you have been using to follow this guide. Configuration​ The default configuration will give you one preview window. No additional changes need to be made. "},{"title":"Single DeckLink Card (Production Minimum)​","type":1,"pageTitle":"Installing CasparCG Server for Sofie","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/casparcg-server-installation#single-decklink-card-production-minimum","content":"Required Hardware​ To be production ready, you will need to output an SDI or HDMI signal from your production machine. CasparCG Server supports Blackmagic Design's DeckLink cards because they provide a key generator which will aid in keeping the alpha and fill channels of your graphics in sync. Please review the DeckLink Cards section of this page to choose which card will best fit your production needs. Configuration​ You will need to add an additional consumer to yourcaspar.config file to output from your DeckLink card. After the screen consumer, add your new DeckLink consumer like so. &lt;channels&gt; &lt;channel&gt; &lt;video-mode&gt;1080i5000&lt;/video-mode&gt; &lt;channel-layout&gt;stereo&lt;/channel-layout&gt; &lt;consumers&gt; &lt;screen&gt; &lt;device&gt;1&lt;/device&gt; &lt;windowed&gt;true&lt;/windowed&gt; &lt;/screen&gt; &lt;system-audio&gt;&lt;/system-audio&gt; &lt;!-- New DeckLink Consumer Start --&gt; &lt;decklink&gt; &lt;device&gt;1&lt;/device&gt; &lt;key-device&gt;1&lt;/key-device&gt; &lt;embedded-audio&gt;true&lt;/embedded-audio&gt; &lt;channel-layout&gt;stereo&lt;/channel-layout&gt; &lt;latency&gt;normal&lt;/latency&gt; &lt;keyer&gt;external_separate_device&lt;/keyer&gt; &lt;key-only&gt;false&lt;/key-only&gt; &lt;buffer-depth&gt;3&lt;/buffer-depth&gt; &lt;/decklink&gt; &lt;!-- DeckLink Consumer End --&gt; &lt;/consumers&gt; &lt;/channel&gt; &lt;/channels&gt;  You may no longer need the screen consumer. If so, you can remove it and all of it's contents. This will dramatically improve overall performance. "},{"title":"Multiple DeckLink Cards (Recommended Production Setup)​","type":1,"pageTitle":"Installing CasparCG Server for Sofie","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/casparcg-server-installation#multiple-decklink-cards-recommended-production-setup","content":"Required Hardware​ For a preferred production setup you want a minimum of two DeckLink Duo 2 cards. This is so you can use one card to preview your media, while your second card will support the program video and audio feeds. For CasparCG Server to recognize both cards, you need to add two additional channels to the caspar.config file. &lt;channels&gt; &lt;channel&gt; &lt;video-mode&gt;1080i5000&lt;/video-mode&gt; &lt;channel-layout&gt;stereo&lt;/channel-layout&gt; &lt;consumers&gt; &lt;screen&gt; &lt;device&gt;1&lt;/device&gt; &lt;windowed&gt;true&lt;/windowed&gt; &lt;/screen&gt; &lt;system-audio&gt;&lt;/system-audio&gt; &lt;!-- New Preview DeckLink Consumer Start --&gt; &lt;decklink&gt; &lt;device&gt;1&lt;/device&gt; &lt;key-device&gt;1&lt;/key-device&gt; &lt;embedded-audio&gt;true&lt;/embedded-audio&gt; &lt;channel-layout&gt;stereo&lt;/channel-layout&gt; &lt;latency&gt;normal&lt;/latency&gt; &lt;keyer&gt;external_separate_device&lt;/keyer&gt; &lt;key-only&gt;false&lt;/key-only&gt; &lt;buffer-depth&gt;3&lt;/buffer-depth&gt; &lt;/decklink&gt; &lt;!-- Preview DeckLink Consumer End --&gt; &lt;!-- New Program DeckLink Consumer Start --&gt; &lt;decklink&gt; &lt;device&gt;2&lt;/device&gt; &lt;key-device&gt;2&lt;/key-device&gt; &lt;embedded-audio&gt;true&lt;/embedded-audio&gt; &lt;channel-layout&gt;stereo&lt;/channel-layout&gt; &lt;latency&gt;normal&lt;/latency&gt; &lt;keyer&gt;external_separate_device&lt;/keyer&gt; &lt;key-only&gt;false&lt;/key-only&gt; &lt;buffer-depth&gt;3&lt;/buffer-depth&gt; &lt;/decklink&gt; &lt;!-- Program DeckLink Consumer End --&gt; &lt;/consumers&gt; &lt;/channel&gt; &lt;/channels&gt;  "},{"title":"Validating the Configuration File​","type":1,"pageTitle":"Installing CasparCG Server for Sofie","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/casparcg-server-installation#validating-the-configuration-file","content":"Once you have setup the configuration file, you can use an online validator to check and make sure it is setup correctly. Navigate to the CasparCG Server Config Validator and paste in your entire configuration file. If there are any errors, they will be displayed at the bottom of the page. "},{"title":"Launching the Server​","type":1,"pageTitle":"Installing CasparCG Server for Sofie","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/casparcg-server-installation#launching-the-server","content":"Launching the Server is the same for each hardware setup. This means you can runcasparcg-launcher.exe and the server and media scanner will start. There will be two additional warning from Windows. The first is about the EXE file and can be bypassed by selecting Advanced and then Run Anyways. The second menu will be about CasparCG Server attempting to access your firewall. You will need to allow access. A window will open and display the status for the server and scanner. You can start, stop, and/or restart the server from here if needed. An additional window should have opened as well. This is the main output of your CasparCG Server and will contain nothing but a black background for now. If you have a DeckLink card installed, its output will also be black. "},{"title":"Connecting Sofie to the CasparCG Server​","type":1,"pageTitle":"Installing CasparCG Server for Sofie","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/casparcg-server-installation#connecting-sofie-to-the-casparcgserver","content":"Now that your CasparCG Server software is running, you can connect it to the Sofie Core. Navigate back to the Settings page and in the menu, select the Playout Gateway. If the Playout Gateway's status does not read Good, then please review the Installing and Setting up the Playout Gateway section of this guide. Under the Sub Devices section, you can add a new device with the + button. Then select the pencil ( edit ) icon on the new device to open the sub device's settings. Select the Device Type option and choose CasparCG from the drop down menu. Some additional fields will be added to the form. The Host and Launcher Host fields will be localhost. The Port will be CasparCG's TCP port responsible for handling the AMCP commands. It defaults to 5052 in the casparcg.config file. The Launcher Port will be the CasparCG Launcher's port for handling HTTP requests. It will default to 8005 and can be changed in the Launcher's settings page. Once all four fields are filled out, you can click the check mark to save the device. In the Attached Sub Devices section, you should now see the status of the CasparCG Server. You may need to restart the Playout Gateway if the status is Bad. "},{"title":"Further Reading​","type":1,"pageTitle":"Installing CasparCG Server for Sofie","url":"docs/user-guide/installation/installing-connections-and-additional-hardware/casparcg-server-installation#further-reading","content":"CasparCG Server Releases on GitHub.Media Scanner Releases on GitHub.CasparCG Launcher on GitHub.Microsoft Visual C++ 2015 Redistributable on Microsoft's website.Blackmagic Design's DeckLink Cards on Blackmagic's website. Check the DeckLink cards section for compatibility.Installing a DeckLink Card as a PDF.Desktop Video Download Page on Blackmagic's website.CasparCG Configuration Validator "},{"title":"Installing Package Manager","type":0,"sectionRef":"#","url":"docs/user-guide/installation/installing-package-manager","content":"","keywords":""},{"title":"Installation (Quick Start)​","type":1,"pageTitle":"Installing Package Manager","url":"docs/user-guide/installation/installing-package-manager#installation-quick-start","content":"Package Manager is a suite of standalone applications, separate from Sofie Core. This guide assumes that Package Manager will be running on the same computer as CasparCG Server and Sofie Core, as that is the fastest way to set up a demo. To get all parts of Package Manager up and running quickly, execute these commands: git clone https://github.com/nrkno/sofie-package-manager.git cd sofie-package-manager yarn install yarn build yarn start:single-app -- -- --basePath &quot;C:\\your\\path\\to\\casparcg-server\\media-folder (i.e. sofie-demo-media)&quot;  Note: if Powershell throws Unknown argument: basePath error, add one more pair of dashes (--) before the basePath argument: yarn start:single-app -- -- -- --basePath &quot;C:\\your\\path\\to\\casparcg-server\\media-folder (i.e. sofie-demo-media)&quot;  On first startup, Package Manager will exit with the following message: Not setup yet, exiting process! To setup, go into Core and add this device to a Studio  This first run is necessary to get the Package Manager device registered with Sofie Core. We'll restart Package Manager later on in the Configuration instructions. "},{"title":"Configuration​","type":1,"pageTitle":"Installing Package Manager","url":"docs/user-guide/installation/installing-package-manager#configuration","content":"Open the Sofie Core Settings page (http://localhost:3000/settings?admin=1), click on your Studio, and scroll down to the Attached Devices section.Click the plus button (+) and select Package Manager to add the Package Manager device to your Studio.On this same settings page, scroll down to the Package Manager section.Click the plus button under the Package Containers heading, then click the edit icon (pencil) to the right of the newly-created package container.Give this package container an ID of casparcgContainer0 and a label of CasparCG Package Container.Click on the dropdown under &quot;Playout devices which use this package container&quot; and select casparcg0. If you don't have a casparcg0 device, add it to the Playout Gateway under the Devices heading, then restart the Playout Gateway. Click the plus button under &quot;Accessors&quot;, then click the edit icon to the right of the newly-created accessor.Give this accessor an ID of casparcgHttpProxy0, a Label of CasparCG HTTP Proxy Accessor, an Accessor Type of HTTP_PROXY, and a Base URL of http://localhost:8080/package. Then, ensure that both the &quot;Allow Read access&quot; and &quot;Allow Write access&quot; boxes are checked. Finally, click the done button (checkmark icon) in the bottom right.Scroll back up a bit to the &quot;Studio Settings&quot; subsection (still in the Package Manager section) and select &quot;CasparCG Package Container&quot; for both &quot;Package Containers to use for previews&quot; and &quot;Package Containers to use for thumbnails&quot;.Your settings should look like this once all the above steps have been completed:If Package Manager start:single-app is running, restart it. If not, start it (see the above Installation instructions for the relevant command line). "},{"title":"Usage​","type":1,"pageTitle":"Installing Package Manager","url":"docs/user-guide/installation/installing-package-manager#usage","content":"In this basic configuration, Package Manager won't be copying any packages into your CasparCG Server media folder. Instead, it will simply check that the files in the rundown are present in your CasparCG Server media folder, and you'll have to manually place those files in the correct directory. However, thumbnail and preview generation will still function, as will status reporting. If you're using the demo rundown provided by the Rundown Editor, you should already see work statuses on the Package Status page (Status &gt; Packages).  If all is good, head to the Rundowns page and open the demo rundown. "},{"title":"Further Reading​","type":1,"pageTitle":"Installing Package Manager","url":"docs/user-guide/installation/installing-package-manager#further-reading","content":"Package Manager on GitHub. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/user-guide/installation/intro","content":"","keywords":""},{"title":"Sofie Core View​","type":1,"pageTitle":"Getting Started","url":"docs/user-guide/installation/intro#sofie-core-view","content":"The Rundowns view will display all the active rundowns that the Sofie Core has access to.  The Status views displays the current status for the attached devices and gateways.  The Settings views contains various settings for the studio, show styles, blueprints etc.. If the link to the settings view is not visible in your application, check your Access Levels. More info on specific parts of the Settings view can be found in their corresponding guide sections.  "},{"title":"Sofie Core Overview​","type":1,"pageTitle":"Getting Started","url":"docs/user-guide/installation/intro#sofie-core-overview","content":"The Sofie Core is the primary application for managing the broadcast but, it doesn't play anything out on it's own. You need to use Gateways to establish the connection from the Sofie Core to other pieces of hardware or remote software. "},{"title":"Gateways​","type":1,"pageTitle":"Getting Started","url":"docs/user-guide/installation/intro#gateways","content":"Gateways are separate applications that bridge the gap between the Sofie Core and other pieces of hardware or services. At minimum, you will need a Playout Gateway so your timeline can interact with your playout system of choice. To install the Playout Gateway, visit the Installing a Gateway section of this guide and for a more in-depth look, please see Gateways. "},{"title":"Blueprints​","type":1,"pageTitle":"Getting Started","url":"docs/user-guide/installation/intro#blueprints","content":"Blueprints can be described as the logic that determines how a studio and show should interact with one another. They interpret the data coming in from the rundowns and transform them into a rich set of playable elements (Segments, Parts, AdLibs, etcetera). The Sofie Core has three main blueprint types, System Blueprints, Studio Blueprints, and Showstyle Blueprints. Installing Sofie does not require you understand what these blueprints do, just that they are required for the Sofie Core to work. If you would like to gain a deeper understand of how Blueprints work, please visit the Blueprints section. "},{"title":"Media Manager","type":0,"sectionRef":"#","url":"docs/user-guide/installation/media-manager","content":"","keywords":""},{"title":"Further Reading​","type":1,"pageTitle":"Media Manager","url":"docs/user-guide/installation/media-manager#further-reading","content":"Media Manager Releases on GitHubMedia Manager GitHub Page for Developers "},{"title":"Sofie Rundown Editor","type":0,"sectionRef":"#","url":"docs/user-guide/installation/rundown-editor","content":"","keywords":""},{"title":"Installing Sofie Rundown Editor​","type":1,"pageTitle":"Sofie Rundown Editor","url":"docs/user-guide/installation/rundown-editor#installing-sofie-rundown-editor","content":"Check the installation instructions on the project repository. "},{"title":"Quick install","type":0,"sectionRef":"#","url":"docs/user-guide/installation/installing-sofie-server-core","content":"","keywords":""},{"title":"Installing for testing (or production)​","type":1,"pageTitle":"Quick install","url":"docs/user-guide/installation/installing-sofie-server-core#installing-for-testing-or-production","content":""},{"title":"Prerequisites​","type":1,"pageTitle":"Quick install","url":"docs/user-guide/installation/installing-sofie-server-core#prerequisites","content":"(Linux) Install Docker and docker-compose. (Windows) Install Docker for Windows. "},{"title":"Installation​","type":1,"pageTitle":"Quick install","url":"docs/user-guide/installation/installing-sofie-server-core#installation","content":"This docker-compose file automates the basic setup of the Sofie-Core application, the backend database and different Gateway options. # This is NOT recommended to be used for a production deployment. # It aims to quickly get an evaluation version of Sofie running and serve as a basis for how to set up a production deployment. version: '3.3' services: db: hostname: mongo image: mongo:4.2.18 restart: always entrypoint: ['/usr/bin/mongod', '--replSet', 'rs0', '--bind_ip_all'] # the healthcheck avoids the need to initiate the replica set healthcheck: test: test $$(echo &quot;rs.initiate().ok || rs.status().ok&quot; | mongo --quiet) -eq 1 interval: 10s start_period: 30s ports: - '27017:27017' volumes: - db-data:/data/db networks: - sofie core: hostname: core image: sofietv/tv-automation-server-core:release37 restart: always ports: - '3000:3000' # Same port as meteor uses by default environment: PORT: '3000' MONGO_URL: 'mongodb://db:27017/meteor' MONGO_OPLOG_URL: 'mongodb://db:27017/local' ROOT_URL: 'http://localhost:3000' networks: - sofie volumes: - snapshots:/mnt/snapshots depends_on: - db playout-gateway: image: sofietv/tv-automation-playout-gateway:release37 restart: always command: yarn start -host core -port 3000 -id playoutGateway0 networks: - sofie - lan_access depends_on: - core # Choose one of the following images, depending on which type of ingest gateway is wanted. # If using the Rundown Editor, then none of the below images are needed. # The Rundown Editor can be found here: https://github.com/SuperFlyTV/sofie-automation-rundown-editor # spreadsheet-gateway: # image: superflytv/sofie-spreadsheet-gateway:latest # restart: always # command: yarn start -host core -port 3000 -id spreadsheetGateway0 # networks: # - sofie # depends_on: # - core # mos-gateway: # image: sofietv/tv-automation-mos-gateway:release37 # restart: always # ports: # - &quot;10540:10540&quot; # MOS Lower port # - &quot;10541:10541&quot; # MOS Upper port # # - &quot;10542:10542&quot; # MOS query port - not used # command: yarn start -host core -port 3000 -id mosGateway0 # networks: # - sofie # depends_on: # - core # inews-gateway: # image: tv2media/inews-ftp-gateway:1.37.0-in-testing.20 # restart: always # command: yarn start -host core -port 3000 -id inewsGateway0 # networks: # - sofie # depends_on: # - core networks: sofie: lan_access: driver: bridge volumes: db-data: snapshots:  Create a Sofie folder, copy the above content, and save it as docker-compose.yaml within the Sofie folder. Navigate to the ingest-gateway section of docker-compose.yaml and select which type of ingest-gateway you'd like installed by uncommenting it. Save your changes. If you are using the Rundown Editor, then no ingest gateways need to be uncommented. Then open a terminal, cd your-sofie-folder and sudo docker-compose up (just docker-compose up on Windows). Once the installation is done, Sofie should be running on http://localhost:3000 Next, you will need to install a Rundown Gateway. Visit Rundowns &amp; Newsroom Systems to see which Rundown Gateway is best suited for your production environment. "},{"title":"Tips for running in production​","type":1,"pageTitle":"Quick install","url":"docs/user-guide/installation/installing-sofie-server-core#tips-for-running-in-production","content":"There are some things not covered in this guide needed to run Sofie in a production environment: Logging: Collect, store and track error messages. Kibana and logstash is one way to do it.NGINX: It is customary to put a load-balancer in front of Sofie Core.Memory and CPU usage monitoring. "},{"title":"Installing for Development​","type":1,"pageTitle":"Quick install","url":"docs/user-guide/installation/installing-sofie-server-core#installing-for-development","content":"Installation instructions for installing Sofie-Core or the various gateways are available in the README file in their respective github repos. Common prerequisites are Node.js and Yarn. Links to the repos are listed at Applications &amp; Libraries. Sofie Core GitHub Page for Developers "},{"title":"Sofie User Guide","type":0,"sectionRef":"#","url":"docs/user-guide/intro","content":"","keywords":""},{"title":"Key Features​","type":1,"pageTitle":"Sofie User Guide","url":"docs/user-guide/intro#key-features","content":""},{"title":"Web-based GUI​","type":1,"pageTitle":"Sofie User Guide","url":"docs/user-guide/intro#web-based-gui","content":"    info Tip: The different web views (such as the host view and the prompter) can easily be transmitted over an SDI signal using the HTML producer in CasparCG. "},{"title":"Modular Device Control​","type":1,"pageTitle":"Sofie User Guide","url":"docs/user-guide/intro#modular-device-control","content":"Sofie controls playout devices (such as vision and audio mixers, graphics and video playback) via the Playout Gateway, using the Timeline. The Playout Gateway controls the devices and keeps track of their state and statuses, and lets the user know via the GUI if something's wrong that can affect the show. "},{"title":"State-based Playout​","type":1,"pageTitle":"Sofie User Guide","url":"docs/user-guide/intro#state-based-playout","content":"Sofie is using a state-based architecture to control playout. This means that each element in the show can be programmed independently - there's no need to take into account what has happened previously in the show; Sofie will make sure that the video is loaded and that the audio fader is tuned to the correct position, no matter what was played out previously. This allows the producer to skip ahead or move backwards in a show, without the fear of things going wrong on air. "},{"title":"Modular Data Ingest​","type":1,"pageTitle":"Sofie User Guide","url":"docs/user-guide/intro#modular-data-ingest","content":"Sofie features a modular ingest data-flow, allowing multiple types of input data to base rundowns on. Currently there is support for MOS-based systems such as ENPS and iNEWS, as well as Google Spreadsheets, and more is in development. "},{"title":"Blueprints​","type":1,"pageTitle":"Sofie User Guide","url":"docs/user-guide/intro#blueprints","content":"The Blueprints are plugins to Sofie, which allows for customization and tailor-made show designs. The blueprints are made different depending on how the input data (rundowns) look like, how the show-design look like, and what devices to control. "},{"title":"Releases","type":0,"sectionRef":"#","url":"releases/","content":"Releases Current, future, and past releases of Sofie are all tracked on NRK's GitHub repository.","keywords":""},{"title":"Supported Playout Devices","type":0,"sectionRef":"#","url":"docs/user-guide/supported-devices","content":"","keywords":""},{"title":"Blackmagic Design's ATEM Vision Mixers ​","type":1,"pageTitle":"Supported Playout Devices","url":"docs/user-guide/supported-devices#blackmagic-designs-atem-vision-mixers-","content":"We support almost all features of these devices except fairlight audio, camera controls and streaming capabilities. A non-inclusive list: Control of camera inputsTransitionsFull control of keyersFull control of DVE'sControl of media poolsControl of auxilliaries "},{"title":"CasparCG Server​","type":1,"pageTitle":"Supported Playout Devices","url":"docs/user-guide/supported-devices#casparcgserver","content":"Tested and developed against a fork of version 2.1 with more support for version 2.3 being added in the future. Video playbackGraphics playbackRecording / streamingMixer parametersTransitions "},{"title":"HTTP Protocol ​","type":1,"pageTitle":"Supported Playout Devices","url":"docs/user-guide/supported-devices#http-protocol-","content":"Get/post/put/delete methodsInterval based watcher for status monitoring "},{"title":"Blackmagic Design HyperDeck ​","type":1,"pageTitle":"Supported Playout Devices","url":"docs/user-guide/supported-devices#blackmagic-design-hyperdeck-","content":"Recording "},{"title":"Lawo Powercore & MC2 Series ​","type":1,"pageTitle":"Supported Playout Devices","url":"docs/user-guide/supported-devices#lawo-powercore--mc2-series-","content":"Control over faders Using the ramp function on the powercore Control of parameters in the ember tree "},{"title":"OSC protocol ​","type":1,"pageTitle":"Supported Playout Devices","url":"docs/user-guide/supported-devices#osc-protocol-","content":"Sending of integers, floats, strings, blobsTweening (transitioning between) values Can be configured in TCP or UDP mode. "},{"title":"Panasonic PTZ Cameras ​","type":1,"pageTitle":"Supported Playout Devices","url":"docs/user-guide/supported-devices#panasonic-ptz-cameras-","content":"Recalling presetsSetting zoom, zoom speed and recall speed "},{"title":"Pharos Lighting Control ​","type":1,"pageTitle":"Supported Playout Devices","url":"docs/user-guide/supported-devices#pharos-lighting-control-","content":"Recalling scenesRecalling timelines "},{"title":"Grass Valley SQ Media Servers ​","type":1,"pageTitle":"Supported Playout Devices","url":"docs/user-guide/supported-devices#grass-valley-sq-media-servers-","content":"Control of playbackLoopingCloning Note: some features are controlled through the media-manager "},{"title":"Shotoku Camera Robotics ​","type":1,"pageTitle":"Supported Playout Devices","url":"docs/user-guide/supported-devices#shotoku-camera-robotics-","content":"Cutting to shotsFading to shots "},{"title":"Singular Live ​","type":1,"pageTitle":"Supported Playout Devices","url":"docs/user-guide/supported-devices#singular-live-","content":"Control nodes Note: this is not currently used in production by anyone we know of "},{"title":"Sisyfos ​","type":1,"pageTitle":"Supported Playout Devices","url":"docs/user-guide/supported-devices#sisyfos-","content":"On-air controlsFader levelsLabelsHide / show channels "},{"title":"TCP Protocol ​","type":1,"pageTitle":"Supported Playout Devices","url":"docs/user-guide/supported-devices#tcp-protocol-","content":"Sending messages "},{"title":"VizRT Viz MSE ​","type":1,"pageTitle":"Supported Playout Devices","url":"docs/user-guide/supported-devices#vizrt-viz-mse-","content":"Pilot elementsContinue commandsLoading all elementsClearing all elements "},{"title":"vMix ​","type":1,"pageTitle":"Supported Playout Devices","url":"docs/user-guide/supported-devices#vmix-","content":"Full M/E controlAudio controlStreaming / recording controlFade to blackOverlaysTransformsTransitions "}]