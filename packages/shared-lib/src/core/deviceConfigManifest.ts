/**
 * A device has configuration options. This file describes a format using
 * typescript in which these options can be described.
 *
 * In general a device can have an array of configuration fields like strings,
 * booleans, numbers etc.
 *
 * A special type is the TABLE. This type describes another array of config
 * options. A table type is rendered as an actual table in core, where the rows
 * are instances of a certain type or are all the same. Manifests entries can
 * describe some properties to be rendered inside this table
 */

import { JSONBlob } from '../lib/JSONBlob.js'
import { TSRActionSchema } from 'timeline-state-resolver-types'
import { TranslationsBundle } from '../lib/translations.js'
import { JSONSchema } from '../lib/JSONSchemaTypes.js'

export interface DeviceConfigManifest {
	/**
	 * A description of the config fields
	 */
	deviceConfigSchema: JSONBlob<JSONSchema>
	/**
	 * If the device has an OAuthFlow (like spreadsheet gw) the instructions for
	 * getting an authentication token go in here
	 */
	deviceOAuthFlow?: DeviceOAuthFlow
	/**
	 * A description of common properties for each subdevice
	 */
	subdeviceConfigSchema?: JSONBlob<JSONSchema>
	/**
	 * A description of how to interact with subdevices
	 */
	subdeviceManifest: SubdeviceManifest
	/**
	 * Translations for any strings generated by the device that may be shown to the user
	 */
	translations?: TranslationsBundle[]
}

export type SubdeviceManifest<T extends string | number = string | number> = {
	[deviceType in T]: {
		/**
		 * Name to display to users for this device type.
		 * This will be translated if supplied by the device.
		 */
		displayName: string
		/**
		 * Stringified JSON schema to use for the settings for this device
		 */
		configSchema: JSONBlob<JSONSchema>
		/**
		 * Playout layer-mappings available for this device type
		 */
		playoutMappings?: Record<string, JSONBlob<JSONSchema>>
		/**
		 * A description of each action that can be executed for this device type
		 */
		actions?: SubdeviceAction[]
	}
}

// Re-export from TSR
export interface SubdeviceAction extends Omit<TSRActionSchema, 'payload'> {
	payload?: JSONBlob<JSONSchema>
}

export interface DeviceOAuthFlow {
	credentialsHelp: string
	credentialsURL: string
}
